// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int32> _pd_compatibilitylevel =
      _lookup<ffi.Int32>('pd_compatibilitylevel');

  int get pd_compatibilitylevel => _pd_compatibilitylevel.value;

  set pd_compatibilitylevel(int value) => _pd_compatibilitylevel.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stdin =
      _lookup<ffi.Pointer<_IO_FILE>>('stdin');

  ffi.Pointer<_IO_FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<_IO_FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stdout =
      _lookup<ffi.Pointer<_IO_FILE>>('stdout');

  ffi.Pointer<_IO_FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<_IO_FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stderr =
      _lookup<ffi.Pointer<_IO_FILE>>('stderr');

  ffi.Pointer<_IO_FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<_IO_FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _remove_ptr = _lookup<ffi.NativeFunction<_c_remove>>('remove');
  late final _dart_remove _remove = _remove_ptr.asFunction<_dart_remove>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _rename_ptr = _lookup<ffi.NativeFunction<_c_rename>>('rename');
  late final _dart_rename _rename = _rename_ptr.asFunction<_dart_rename>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat_ptr =
      _lookup<ffi.NativeFunction<_c_renameat>>('renameat');
  late final _dart_renameat _renameat =
      _renameat_ptr.asFunction<_dart_renameat>();

  ffi.Pointer<_IO_FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfile_ptr = _lookup<ffi.NativeFunction<_c_tmpfile>>('tmpfile');
  late final _dart_tmpfile _tmpfile = _tmpfile_ptr.asFunction<_dart_tmpfile>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam(
      __s,
    );
  }

  late final _tmpnam_ptr = _lookup<ffi.NativeFunction<_c_tmpnam>>('tmpnam');
  late final _dart_tmpnam _tmpnam = _tmpnam_ptr.asFunction<_dart_tmpnam>();

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_r_ptr =
      _lookup<ffi.NativeFunction<_c_tmpnam_r>>('tmpnam_r');
  late final _dart_tmpnam_r _tmpnam_r =
      _tmpnam_r_ptr.asFunction<_dart_tmpnam_r>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnam_ptr = _lookup<ffi.NativeFunction<_c_tempnam>>('tempnam');
  late final _dart_tempnam _tempnam = _tempnam_ptr.asFunction<_dart_tempnam>();

  int fclose(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclose_ptr = _lookup<ffi.NativeFunction<_c_fclose>>('fclose');
  late final _dart_fclose _fclose = _fclose_ptr.asFunction<_dart_fclose>();

  int fflush(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflush_ptr = _lookup<ffi.NativeFunction<_c_fflush>>('fflush');
  late final _dart_fflush _fflush = _fflush_ptr.asFunction<_dart_fflush>();

  int fflush_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fflush_unlocked>>('fflush_unlocked');
  late final _dart_fflush_unlocked _fflush_unlocked =
      _fflush_unlocked_ptr.asFunction<_dart_fflush_unlocked>();

  ffi.Pointer<_IO_FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopen_ptr = _lookup<ffi.NativeFunction<_c_fopen>>('fopen');
  late final _dart_fopen _fopen = _fopen_ptr.asFunction<_dart_fopen>();

  ffi.Pointer<_IO_FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen_ptr = _lookup<ffi.NativeFunction<_c_freopen>>('freopen');
  late final _dart_freopen _freopen = _freopen_ptr.asFunction<_dart_freopen>();

  ffi.Pointer<_IO_FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopen_ptr = _lookup<ffi.NativeFunction<_c_fdopen>>('fdopen');
  late final _dart_fdopen _fdopen = _fdopen_ptr.asFunction<_dart_fdopen>();

  ffi.Pointer<_IO_FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen_ptr =
      _lookup<ffi.NativeFunction<_c_fmemopen>>('fmemopen');
  late final _dart_fmemopen _fmemopen =
      _fmemopen_ptr.asFunction<_dart_fmemopen>();

  ffi.Pointer<_IO_FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<ffi.Int32> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream_ptr =
      _lookup<ffi.NativeFunction<_c_open_memstream>>('open_memstream');
  late final _dart_open_memstream _open_memstream =
      _open_memstream_ptr.asFunction<_dart_open_memstream>();

  void setbuf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbuf_ptr = _lookup<ffi.NativeFunction<_c_setbuf>>('setbuf');
  late final _dart_setbuf _setbuf = _setbuf_ptr.asFunction<_dart_setbuf>();

  int setvbuf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf_ptr = _lookup<ffi.NativeFunction<_c_setvbuf>>('setvbuf');
  late final _dart_setvbuf _setvbuf = _setvbuf_ptr.asFunction<_dart_setvbuf>();

  void setbuffer(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer_ptr =
      _lookup<ffi.NativeFunction<_c_setbuffer>>('setbuffer');
  late final _dart_setbuffer _setbuffer =
      _setbuffer_ptr.asFunction<_dart_setbuffer>();

  void setlinebuf(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebuf_ptr =
      _lookup<ffi.NativeFunction<_c_setlinebuf>>('setlinebuf');
  late final _dart_setlinebuf _setlinebuf =
      _setlinebuf_ptr.asFunction<_dart_setlinebuf>();

  int fprintf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintf_ptr = _lookup<ffi.NativeFunction<_c_fprintf>>('fprintf');
  late final _dart_fprintf _fprintf = _fprintf_ptr.asFunction<_dart_fprintf>();

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printf_ptr = _lookup<ffi.NativeFunction<_c_printf>>('printf');
  late final _dart_printf _printf = _printf_ptr.asFunction<_dart_printf>();

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintf_ptr = _lookup<ffi.NativeFunction<_c_sprintf>>('sprintf');
  late final _dart_sprintf _sprintf = _sprintf_ptr.asFunction<_dart_sprintf>();

  int vfprintf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vfprintf>>('vfprintf');
  late final _dart_vfprintf _vfprintf =
      _vfprintf_ptr.asFunction<_dart_vfprintf>();

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintf_ptr = _lookup<ffi.NativeFunction<_c_vprintf>>('vprintf');
  late final _dart_vprintf _vprintf = _vprintf_ptr.asFunction<_dart_vprintf>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vsprintf>>('vsprintf');
  late final _dart_vsprintf _vsprintf =
      _vsprintf_ptr.asFunction<_dart_vsprintf>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf_ptr =
      _lookup<ffi.NativeFunction<_c_snprintf>>('snprintf');
  late final _dart_snprintf _snprintf =
      _snprintf_ptr.asFunction<_dart_snprintf>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vsnprintf>>('vsnprintf');
  late final _dart_vsnprintf _vsnprintf =
      _vsnprintf_ptr.asFunction<_dart_vsnprintf>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    int __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vdprintf>>('vdprintf');
  late final _dart_vdprintf _vdprintf =
      _vdprintf_ptr.asFunction<_dart_vdprintf>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintf_ptr = _lookup<ffi.NativeFunction<_c_dprintf>>('dprintf');
  late final _dart_dprintf _dprintf = _dprintf_ptr.asFunction<_dart_dprintf>();

  int fscanf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanf_ptr = _lookup<ffi.NativeFunction<_c_fscanf>>('fscanf');
  late final _dart_fscanf _fscanf = _fscanf_ptr.asFunction<_dart_fscanf>();

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanf_ptr = _lookup<ffi.NativeFunction<_c_scanf>>('scanf');
  late final _dart_scanf _scanf = _scanf_ptr.asFunction<_dart_scanf>();

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanf_ptr = _lookup<ffi.NativeFunction<_c_sscanf>>('sscanf');
  late final _dart_sscanf _sscanf = _sscanf_ptr.asFunction<_dart_sscanf>();

  int vfscanf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf_ptr = _lookup<ffi.NativeFunction<_c_vfscanf>>('vfscanf');
  late final _dart_vfscanf _vfscanf = _vfscanf_ptr.asFunction<_dart_vfscanf>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanf_ptr = _lookup<ffi.NativeFunction<_c_vscanf>>('vscanf');
  late final _dart_vscanf _vscanf = _vscanf_ptr.asFunction<_dart_vscanf>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf_ptr = _lookup<ffi.NativeFunction<_c_vsscanf>>('vsscanf');
  late final _dart_vsscanf _vsscanf = _vsscanf_ptr.asFunction<_dart_vsscanf>();

  int fgetc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetc_ptr = _lookup<ffi.NativeFunction<_c_fgetc>>('fgetc');
  late final _dart_fgetc _fgetc = _fgetc_ptr.asFunction<_dart_fgetc>();

  int getc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getc_ptr = _lookup<ffi.NativeFunction<_c_getc>>('getc');
  late final _dart_getc _getc = _getc_ptr.asFunction<_dart_getc>();

  int getchar() {
    return _getchar();
  }

  late final _getchar_ptr = _lookup<ffi.NativeFunction<_c_getchar>>('getchar');
  late final _dart_getchar _getchar = _getchar_ptr.asFunction<_dart_getchar>();

  int getc_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_getc_unlocked>>('getc_unlocked');
  late final _dart_getc_unlocked _getc_unlocked =
      _getc_unlocked_ptr.asFunction<_dart_getc_unlocked>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_getchar_unlocked>>('getchar_unlocked');
  late final _dart_getchar_unlocked _getchar_unlocked =
      _getchar_unlocked_ptr.asFunction<_dart_getchar_unlocked>();

  int fgetc_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fgetc_unlocked>>('fgetc_unlocked');
  late final _dart_fgetc_unlocked _fgetc_unlocked =
      _fgetc_unlocked_ptr.asFunction<_dart_fgetc_unlocked>();

  int fputc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputc_ptr = _lookup<ffi.NativeFunction<_c_fputc>>('fputc');
  late final _dart_fputc _fputc = _fputc_ptr.asFunction<_dart_fputc>();

  int putc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putc_ptr = _lookup<ffi.NativeFunction<_c_putc>>('putc');
  late final _dart_putc _putc = _putc_ptr.asFunction<_dart_putc>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putchar_ptr = _lookup<ffi.NativeFunction<_c_putchar>>('putchar');
  late final _dart_putchar _putchar = _putchar_ptr.asFunction<_dart_putchar>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fputc_unlocked>>('fputc_unlocked');
  late final _dart_fputc_unlocked _fputc_unlocked =
      _fputc_unlocked_ptr.asFunction<_dart_fputc_unlocked>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_putc_unlocked>>('putc_unlocked');
  late final _dart_putc_unlocked _putc_unlocked =
      _putc_unlocked_ptr.asFunction<_dart_putc_unlocked>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_putchar_unlocked>>('putchar_unlocked');
  late final _dart_putchar_unlocked _putchar_unlocked =
      _putchar_unlocked_ptr.asFunction<_dart_putchar_unlocked>();

  int getw(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getw_ptr = _lookup<ffi.NativeFunction<_c_getw>>('getw');
  late final _dart_getw _getw = _getw_ptr.asFunction<_dart_getw>();

  int putw(
    int __w,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putw_ptr = _lookup<ffi.NativeFunction<_c_putw>>('putw');
  late final _dart_putw _putw = _putw_ptr.asFunction<_dart_putw>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets_ptr = _lookup<ffi.NativeFunction<_c_fgets>>('fgets');
  late final _dart_fgets _fgets = _fgets_ptr.asFunction<_dart_fgets>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    int __delimiter,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim_ptr =
      _lookup<ffi.NativeFunction<_c___getdelim>>('__getdelim');
  late final _dart___getdelim ___getdelim =
      ___getdelim_ptr.asFunction<_dart___getdelim>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    int __delimiter,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim_ptr =
      _lookup<ffi.NativeFunction<_c_getdelim>>('getdelim');
  late final _dart_getdelim _getdelim =
      _getdelim_ptr.asFunction<_dart_getdelim>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline_ptr = _lookup<ffi.NativeFunction<_c_getline>>('getline');
  late final _dart_getline _getline = _getline_ptr.asFunction<_dart_getline>();

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputs_ptr = _lookup<ffi.NativeFunction<_c_fputs>>('fputs');
  late final _dart_fputs _fputs = _fputs_ptr.asFunction<_dart_fputs>();

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _puts_ptr = _lookup<ffi.NativeFunction<_c_puts>>('puts');
  late final _dart_puts _puts = _puts_ptr.asFunction<_dart_puts>();

  int ungetc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetc_ptr = _lookup<ffi.NativeFunction<_c_ungetc>>('ungetc');
  late final _dart_ungetc _ungetc = _ungetc_ptr.asFunction<_dart_ungetc>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_ptr = _lookup<ffi.NativeFunction<_c_fread>>('fread');
  late final _dart_fread _fread = _fread_ptr.asFunction<_dart_fread>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite_ptr = _lookup<ffi.NativeFunction<_c_fwrite>>('fwrite');
  late final _dart_fwrite _fwrite = _fwrite_ptr.asFunction<_dart_fwrite>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fread_unlocked>>('fread_unlocked');
  late final _dart_fread_unlocked _fread_unlocked =
      _fread_unlocked_ptr.asFunction<_dart_fread_unlocked>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fwrite_unlocked>>('fwrite_unlocked');
  late final _dart_fwrite_unlocked _fwrite_unlocked =
      _fwrite_unlocked_ptr.asFunction<_dart_fwrite_unlocked>();

  int fseek(
    ffi.Pointer<_IO_FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek_ptr = _lookup<ffi.NativeFunction<_c_fseek>>('fseek');
  late final _dart_fseek _fseek = _fseek_ptr.asFunction<_dart_fseek>();

  int ftell(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftell_ptr = _lookup<ffi.NativeFunction<_c_ftell>>('ftell');
  late final _dart_ftell _ftell = _ftell_ptr.asFunction<_dart_ftell>();

  void rewind(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewind_ptr = _lookup<ffi.NativeFunction<_c_rewind>>('rewind');
  late final _dart_rewind _rewind = _rewind_ptr.asFunction<_dart_rewind>();

  int fseeko(
    ffi.Pointer<_IO_FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko_ptr = _lookup<ffi.NativeFunction<_c_fseeko>>('fseeko');
  late final _dart_fseeko _fseeko = _fseeko_ptr.asFunction<_dart_fseeko>();

  int ftello(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftello_ptr = _lookup<ffi.NativeFunction<_c_ftello>>('ftello');
  late final _dart_ftello _ftello = _ftello_ptr.asFunction<_dart_ftello>();

  int fgetpos(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<__fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetpos_ptr = _lookup<ffi.NativeFunction<_c_fgetpos>>('fgetpos');
  late final _dart_fgetpos _fgetpos = _fgetpos_ptr.asFunction<_dart_fgetpos>();

  int fsetpos(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<__fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetpos_ptr = _lookup<ffi.NativeFunction<_c_fsetpos>>('fsetpos');
  late final _dart_fsetpos _fsetpos = _fsetpos_ptr.asFunction<_dart_fsetpos>();

  void clearerr(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerr_ptr =
      _lookup<ffi.NativeFunction<_c_clearerr>>('clearerr');
  late final _dart_clearerr _clearerr =
      _clearerr_ptr.asFunction<_dart_clearerr>();

  int feof(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feof_ptr = _lookup<ffi.NativeFunction<_c_feof>>('feof');
  late final _dart_feof _feof = _feof_ptr.asFunction<_dart_feof>();

  int ferror(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferror_ptr = _lookup<ffi.NativeFunction<_c_ferror>>('ferror');
  late final _dart_ferror _ferror = _ferror_ptr.asFunction<_dart_ferror>();

  void clearerr_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_clearerr_unlocked>>('clearerr_unlocked');
  late final _dart_clearerr_unlocked _clearerr_unlocked =
      _clearerr_unlocked_ptr.asFunction<_dart_clearerr_unlocked>();

  int feof_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_feof_unlocked>>('feof_unlocked');
  late final _dart_feof_unlocked _feof_unlocked =
      _feof_unlocked_ptr.asFunction<_dart_feof_unlocked>();

  int ferror_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_ferror_unlocked>>('ferror_unlocked');
  late final _dart_ferror_unlocked _ferror_unlocked =
      _ferror_unlocked_ptr.asFunction<_dart_ferror_unlocked>();

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perror_ptr = _lookup<ffi.NativeFunction<_c_perror>>('perror');
  late final _dart_perror _perror = _perror_ptr.asFunction<_dart_perror>();

  int fileno(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _fileno_ptr = _lookup<ffi.NativeFunction<_c_fileno>>('fileno');
  late final _dart_fileno _fileno = _fileno_ptr.asFunction<_dart_fileno>();

  int fileno_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fileno_unlocked>>('fileno_unlocked');
  late final _dart_fileno_unlocked _fileno_unlocked =
      _fileno_unlocked_ptr.asFunction<_dart_fileno_unlocked>();

  ffi.Pointer<_IO_FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popen_ptr = _lookup<ffi.NativeFunction<_c_popen>>('popen');
  late final _dart_popen _popen = _popen_ptr.asFunction<_dart_popen>();

  int pclose(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclose_ptr = _lookup<ffi.NativeFunction<_c_pclose>>('pclose');
  late final _dart_pclose _pclose = _pclose_ptr.asFunction<_dart_pclose>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermid_ptr = _lookup<ffi.NativeFunction<_c_ctermid>>('ctermid');
  late final _dart_ctermid _ctermid = _ctermid_ptr.asFunction<_dart_ctermid>();

  void flockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfile_ptr =
      _lookup<ffi.NativeFunction<_c_flockfile>>('flockfile');
  late final _dart_flockfile _flockfile =
      _flockfile_ptr.asFunction<_dart_flockfile>();

  int ftrylockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfile_ptr =
      _lookup<ffi.NativeFunction<_c_ftrylockfile>>('ftrylockfile');
  late final _dart_ftrylockfile _ftrylockfile =
      _ftrylockfile_ptr.asFunction<_dart_ftrylockfile>();

  void funlockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfile_ptr =
      _lookup<ffi.NativeFunction<_c_funlockfile>>('funlockfile');
  late final _dart_funlockfile _funlockfile =
      _funlockfile_ptr.asFunction<_dart_funlockfile>();

  int __uflow(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflow_ptr = _lookup<ffi.NativeFunction<_c___uflow>>('__uflow');
  late final _dart___uflow ___uflow = ___uflow_ptr.asFunction<_dart___uflow>();

  int __overflow(
    ffi.Pointer<_IO_FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflow_ptr =
      _lookup<ffi.NativeFunction<_c___overflow>>('__overflow');
  late final _dart___overflow ___overflow =
      ___overflow_ptr.asFunction<_dart___overflow>();

  late final ffi.Pointer<ffi.Pointer<_class>> _pd_objectmaker =
      _lookup<ffi.Pointer<_class>>('pd_objectmaker');

  ffi.Pointer<_class> get pd_objectmaker => _pd_objectmaker.value;

  set pd_objectmaker(ffi.Pointer<_class> value) =>
      _pd_objectmaker.value = value;

  late final ffi.Pointer<ffi.Pointer<_class>> _pd_canvasmaker =
      _lookup<ffi.Pointer<_class>>('pd_canvasmaker');

  ffi.Pointer<_class> get pd_canvasmaker => _pd_canvasmaker.value;

  set pd_canvasmaker(ffi.Pointer<_class> value) =>
      _pd_canvasmaker.value = value;

  void pd_typedmess(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _pd_typedmess(
      x,
      s,
      argc,
      argv,
    );
  }

  late final _pd_typedmess_ptr =
      _lookup<ffi.NativeFunction<_c_pd_typedmess>>('pd_typedmess');
  late final _dart_pd_typedmess _pd_typedmess =
      _pd_typedmess_ptr.asFunction<_dart_pd_typedmess>();

  void pd_forwardmess(
    ffi.Pointer<ffi.Pointer<_class>> x,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _pd_forwardmess(
      x,
      argc,
      argv,
    );
  }

  late final _pd_forwardmess_ptr =
      _lookup<ffi.NativeFunction<_c_pd_forwardmess>>('pd_forwardmess');
  late final _dart_pd_forwardmess _pd_forwardmess =
      _pd_forwardmess_ptr.asFunction<_dart_pd_forwardmess>();

  ffi.Pointer<t_symbol> gensym(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _gensym(
      s,
    );
  }

  late final _gensym_ptr = _lookup<ffi.NativeFunction<_c_gensym>>('gensym');
  late final _dart_gensym _gensym = _gensym_ptr.asFunction<_dart_gensym>();

  ffi.Pointer<ffi.NativeFunction<t_gotfn>> getfn(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
  ) {
    return _getfn(
      x,
      s,
    );
  }

  late final _getfn_ptr = _lookup<ffi.NativeFunction<_c_getfn>>('getfn');
  late final _dart_getfn _getfn = _getfn_ptr.asFunction<_dart_getfn>();

  ffi.Pointer<ffi.NativeFunction<t_gotfn>> zgetfn(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
  ) {
    return _zgetfn(
      x,
      s,
    );
  }

  late final _zgetfn_ptr = _lookup<ffi.NativeFunction<_c_zgetfn>>('zgetfn');
  late final _dart_zgetfn _zgetfn = _zgetfn_ptr.asFunction<_dart_zgetfn>();

  void nullfn() {
    return _nullfn();
  }

  late final _nullfn_ptr = _lookup<ffi.NativeFunction<_c_nullfn>>('nullfn');
  late final _dart_nullfn _nullfn = _nullfn_ptr.asFunction<_dart_nullfn>();

  void pd_vmess(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _pd_vmess(
      x,
      s,
      fmt,
    );
  }

  late final _pd_vmess_ptr =
      _lookup<ffi.NativeFunction<_c_pd_vmess>>('pd_vmess');
  late final _dart_pd_vmess _pd_vmess =
      _pd_vmess_ptr.asFunction<_dart_pd_vmess>();

  void obj_list(
    ffi.Pointer<t_text> x,
    ffi.Pointer<t_symbol> s,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _obj_list(
      x,
      s,
      argc,
      argv,
    );
  }

  late final _obj_list_ptr =
      _lookup<ffi.NativeFunction<_c_obj_list>>('obj_list');
  late final _dart_obj_list _obj_list =
      _obj_list_ptr.asFunction<_dart_obj_list>();

  ffi.Pointer<ffi.Pointer<_class>> pd_newest() {
    return _pd_newest();
  }

  late final _pd_newest_ptr =
      _lookup<ffi.NativeFunction<_c_pd_newest>>('pd_newest');
  late final _dart_pd_newest _pd_newest =
      _pd_newest_ptr.asFunction<_dart_pd_newest>();

  ffi.Pointer<ffi.Void> getbytes(
    int nbytes,
  ) {
    return _getbytes(
      nbytes,
    );
  }

  late final _getbytes_ptr =
      _lookup<ffi.NativeFunction<_c_getbytes>>('getbytes');
  late final _dart_getbytes _getbytes =
      _getbytes_ptr.asFunction<_dart_getbytes>();

  ffi.Pointer<ffi.Void> getzbytes(
    int nbytes,
  ) {
    return _getzbytes(
      nbytes,
    );
  }

  late final _getzbytes_ptr =
      _lookup<ffi.NativeFunction<_c_getzbytes>>('getzbytes');
  late final _dart_getzbytes _getzbytes =
      _getzbytes_ptr.asFunction<_dart_getzbytes>();

  ffi.Pointer<ffi.Void> copybytes(
    ffi.Pointer<ffi.Void> src,
    int nbytes,
  ) {
    return _copybytes(
      src,
      nbytes,
    );
  }

  late final _copybytes_ptr =
      _lookup<ffi.NativeFunction<_c_copybytes>>('copybytes');
  late final _dart_copybytes _copybytes =
      _copybytes_ptr.asFunction<_dart_copybytes>();

  void freebytes(
    ffi.Pointer<ffi.Void> x,
    int nbytes,
  ) {
    return _freebytes(
      x,
      nbytes,
    );
  }

  late final _freebytes_ptr =
      _lookup<ffi.NativeFunction<_c_freebytes>>('freebytes');
  late final _dart_freebytes _freebytes =
      _freebytes_ptr.asFunction<_dart_freebytes>();

  ffi.Pointer<ffi.Void> resizebytes(
    ffi.Pointer<ffi.Void> x,
    int oldsize,
    int newsize,
  ) {
    return _resizebytes(
      x,
      oldsize,
      newsize,
    );
  }

  late final _resizebytes_ptr =
      _lookup<ffi.NativeFunction<_c_resizebytes>>('resizebytes');
  late final _dart_resizebytes _resizebytes =
      _resizebytes_ptr.asFunction<_dart_resizebytes>();

  double atom_getfloat(
    ffi.Pointer<t_atom> a,
  ) {
    return _atom_getfloat(
      a,
    );
  }

  late final _atom_getfloat_ptr =
      _lookup<ffi.NativeFunction<_c_atom_getfloat>>('atom_getfloat');
  late final _dart_atom_getfloat _atom_getfloat =
      _atom_getfloat_ptr.asFunction<_dart_atom_getfloat>();

  int atom_getint(
    ffi.Pointer<t_atom> a,
  ) {
    return _atom_getint(
      a,
    );
  }

  late final _atom_getint_ptr =
      _lookup<ffi.NativeFunction<_c_atom_getint>>('atom_getint');
  late final _dart_atom_getint _atom_getint =
      _atom_getint_ptr.asFunction<_dart_atom_getint>();

  ffi.Pointer<t_symbol> atom_getsymbol(
    ffi.Pointer<t_atom> a,
  ) {
    return _atom_getsymbol(
      a,
    );
  }

  late final _atom_getsymbol_ptr =
      _lookup<ffi.NativeFunction<_c_atom_getsymbol>>('atom_getsymbol');
  late final _dart_atom_getsymbol _atom_getsymbol =
      _atom_getsymbol_ptr.asFunction<_dart_atom_getsymbol>();

  ffi.Pointer<t_symbol> atom_gensym(
    ffi.Pointer<t_atom> a,
  ) {
    return _atom_gensym(
      a,
    );
  }

  late final _atom_gensym_ptr =
      _lookup<ffi.NativeFunction<_c_atom_gensym>>('atom_gensym');
  late final _dart_atom_gensym _atom_gensym =
      _atom_gensym_ptr.asFunction<_dart_atom_gensym>();

  double atom_getfloatarg(
    int which,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _atom_getfloatarg(
      which,
      argc,
      argv,
    );
  }

  late final _atom_getfloatarg_ptr =
      _lookup<ffi.NativeFunction<_c_atom_getfloatarg>>('atom_getfloatarg');
  late final _dart_atom_getfloatarg _atom_getfloatarg =
      _atom_getfloatarg_ptr.asFunction<_dart_atom_getfloatarg>();

  int atom_getintarg(
    int which,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _atom_getintarg(
      which,
      argc,
      argv,
    );
  }

  late final _atom_getintarg_ptr =
      _lookup<ffi.NativeFunction<_c_atom_getintarg>>('atom_getintarg');
  late final _dart_atom_getintarg _atom_getintarg =
      _atom_getintarg_ptr.asFunction<_dart_atom_getintarg>();

  ffi.Pointer<t_symbol> atom_getsymbolarg(
    int which,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _atom_getsymbolarg(
      which,
      argc,
      argv,
    );
  }

  late final _atom_getsymbolarg_ptr =
      _lookup<ffi.NativeFunction<_c_atom_getsymbolarg>>('atom_getsymbolarg');
  late final _dart_atom_getsymbolarg _atom_getsymbolarg =
      _atom_getsymbolarg_ptr.asFunction<_dart_atom_getsymbolarg>();

  void atom_string(
    ffi.Pointer<t_atom> a,
    ffi.Pointer<ffi.Int8> buf,
    int bufsize,
  ) {
    return _atom_string(
      a,
      buf,
      bufsize,
    );
  }

  late final _atom_string_ptr =
      _lookup<ffi.NativeFunction<_c_atom_string>>('atom_string');
  late final _dart_atom_string _atom_string =
      _atom_string_ptr.asFunction<_dart_atom_string>();

  ffi.Pointer<_binbuf> binbuf_new() {
    return _binbuf_new();
  }

  late final _binbuf_new_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_new>>('binbuf_new');
  late final _dart_binbuf_new _binbuf_new =
      _binbuf_new_ptr.asFunction<_dart_binbuf_new>();

  void binbuf_free(
    ffi.Pointer<_binbuf> x,
  ) {
    return _binbuf_free(
      x,
    );
  }

  late final _binbuf_free_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_free>>('binbuf_free');
  late final _dart_binbuf_free _binbuf_free =
      _binbuf_free_ptr.asFunction<_dart_binbuf_free>();

  ffi.Pointer<_binbuf> binbuf_duplicate(
    ffi.Pointer<_binbuf> y,
  ) {
    return _binbuf_duplicate(
      y,
    );
  }

  late final _binbuf_duplicate_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_duplicate>>('binbuf_duplicate');
  late final _dart_binbuf_duplicate _binbuf_duplicate =
      _binbuf_duplicate_ptr.asFunction<_dart_binbuf_duplicate>();

  void binbuf_text(
    ffi.Pointer<_binbuf> x,
    ffi.Pointer<ffi.Int8> text,
    int size,
  ) {
    return _binbuf_text(
      x,
      text,
      size,
    );
  }

  late final _binbuf_text_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_text>>('binbuf_text');
  late final _dart_binbuf_text _binbuf_text =
      _binbuf_text_ptr.asFunction<_dart_binbuf_text>();

  void binbuf_gettext(
    ffi.Pointer<_binbuf> x,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> bufp,
    ffi.Pointer<ffi.Int32> lengthp,
  ) {
    return _binbuf_gettext(
      x,
      bufp,
      lengthp,
    );
  }

  late final _binbuf_gettext_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_gettext>>('binbuf_gettext');
  late final _dart_binbuf_gettext _binbuf_gettext =
      _binbuf_gettext_ptr.asFunction<_dart_binbuf_gettext>();

  void binbuf_clear(
    ffi.Pointer<_binbuf> x,
  ) {
    return _binbuf_clear(
      x,
    );
  }

  late final _binbuf_clear_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_clear>>('binbuf_clear');
  late final _dart_binbuf_clear _binbuf_clear =
      _binbuf_clear_ptr.asFunction<_dart_binbuf_clear>();

  void binbuf_add(
    ffi.Pointer<_binbuf> x,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _binbuf_add(
      x,
      argc,
      argv,
    );
  }

  late final _binbuf_add_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_add>>('binbuf_add');
  late final _dart_binbuf_add _binbuf_add =
      _binbuf_add_ptr.asFunction<_dart_binbuf_add>();

  void binbuf_addv(
    ffi.Pointer<_binbuf> x,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _binbuf_addv(
      x,
      fmt,
    );
  }

  late final _binbuf_addv_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_addv>>('binbuf_addv');
  late final _dart_binbuf_addv _binbuf_addv =
      _binbuf_addv_ptr.asFunction<_dart_binbuf_addv>();

  void binbuf_addbinbuf(
    ffi.Pointer<_binbuf> x,
    ffi.Pointer<_binbuf> y,
  ) {
    return _binbuf_addbinbuf(
      x,
      y,
    );
  }

  late final _binbuf_addbinbuf_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_addbinbuf>>('binbuf_addbinbuf');
  late final _dart_binbuf_addbinbuf _binbuf_addbinbuf =
      _binbuf_addbinbuf_ptr.asFunction<_dart_binbuf_addbinbuf>();

  void binbuf_addsemi(
    ffi.Pointer<_binbuf> x,
  ) {
    return _binbuf_addsemi(
      x,
    );
  }

  late final _binbuf_addsemi_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_addsemi>>('binbuf_addsemi');
  late final _dart_binbuf_addsemi _binbuf_addsemi =
      _binbuf_addsemi_ptr.asFunction<_dart_binbuf_addsemi>();

  void binbuf_restore(
    ffi.Pointer<_binbuf> x,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _binbuf_restore(
      x,
      argc,
      argv,
    );
  }

  late final _binbuf_restore_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_restore>>('binbuf_restore');
  late final _dart_binbuf_restore _binbuf_restore =
      _binbuf_restore_ptr.asFunction<_dart_binbuf_restore>();

  void binbuf_print(
    ffi.Pointer<_binbuf> x,
  ) {
    return _binbuf_print(
      x,
    );
  }

  late final _binbuf_print_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_print>>('binbuf_print');
  late final _dart_binbuf_print _binbuf_print =
      _binbuf_print_ptr.asFunction<_dart_binbuf_print>();

  int binbuf_getnatom(
    ffi.Pointer<_binbuf> x,
  ) {
    return _binbuf_getnatom(
      x,
    );
  }

  late final _binbuf_getnatom_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_getnatom>>('binbuf_getnatom');
  late final _dart_binbuf_getnatom _binbuf_getnatom =
      _binbuf_getnatom_ptr.asFunction<_dart_binbuf_getnatom>();

  ffi.Pointer<t_atom> binbuf_getvec(
    ffi.Pointer<_binbuf> x,
  ) {
    return _binbuf_getvec(
      x,
    );
  }

  late final _binbuf_getvec_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_getvec>>('binbuf_getvec');
  late final _dart_binbuf_getvec _binbuf_getvec =
      _binbuf_getvec_ptr.asFunction<_dart_binbuf_getvec>();

  int binbuf_resize(
    ffi.Pointer<_binbuf> x,
    int newsize,
  ) {
    return _binbuf_resize(
      x,
      newsize,
    );
  }

  late final _binbuf_resize_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_resize>>('binbuf_resize');
  late final _dart_binbuf_resize _binbuf_resize =
      _binbuf_resize_ptr.asFunction<_dart_binbuf_resize>();

  void binbuf_eval(
    ffi.Pointer<_binbuf> x,
    ffi.Pointer<ffi.Pointer<_class>> target,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _binbuf_eval(
      x,
      target,
      argc,
      argv,
    );
  }

  late final _binbuf_eval_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_eval>>('binbuf_eval');
  late final _dart_binbuf_eval _binbuf_eval =
      _binbuf_eval_ptr.asFunction<_dart_binbuf_eval>();

  int binbuf_read(
    ffi.Pointer<_binbuf> b,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> dirname,
    int crflag,
  ) {
    return _binbuf_read(
      b,
      filename,
      dirname,
      crflag,
    );
  }

  late final _binbuf_read_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_read>>('binbuf_read');
  late final _dart_binbuf_read _binbuf_read =
      _binbuf_read_ptr.asFunction<_dart_binbuf_read>();

  int binbuf_read_via_canvas(
    ffi.Pointer<_binbuf> b,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<_glist> canvas,
    int crflag,
  ) {
    return _binbuf_read_via_canvas(
      b,
      filename,
      canvas,
      crflag,
    );
  }

  late final _binbuf_read_via_canvas_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_read_via_canvas>>(
          'binbuf_read_via_canvas');
  late final _dart_binbuf_read_via_canvas _binbuf_read_via_canvas =
      _binbuf_read_via_canvas_ptr.asFunction<_dart_binbuf_read_via_canvas>();

  int binbuf_read_via_path(
    ffi.Pointer<_binbuf> b,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> dirname,
    int crflag,
  ) {
    return _binbuf_read_via_path(
      b,
      filename,
      dirname,
      crflag,
    );
  }

  late final _binbuf_read_via_path_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_read_via_path>>(
          'binbuf_read_via_path');
  late final _dart_binbuf_read_via_path _binbuf_read_via_path =
      _binbuf_read_via_path_ptr.asFunction<_dart_binbuf_read_via_path>();

  int binbuf_write(
    ffi.Pointer<_binbuf> x,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> dir,
    int crflag,
  ) {
    return _binbuf_write(
      x,
      filename,
      dir,
      crflag,
    );
  }

  late final _binbuf_write_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_write>>('binbuf_write');
  late final _dart_binbuf_write _binbuf_write =
      _binbuf_write_ptr.asFunction<_dart_binbuf_write>();

  void binbuf_evalfile(
    ffi.Pointer<t_symbol> name,
    ffi.Pointer<t_symbol> dir,
  ) {
    return _binbuf_evalfile(
      name,
      dir,
    );
  }

  late final _binbuf_evalfile_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_evalfile>>('binbuf_evalfile');
  late final _dart_binbuf_evalfile _binbuf_evalfile =
      _binbuf_evalfile_ptr.asFunction<_dart_binbuf_evalfile>();

  ffi.Pointer<t_symbol> binbuf_realizedollsym(
    ffi.Pointer<t_symbol> s,
    int ac,
    ffi.Pointer<t_atom> av,
    int tonew,
  ) {
    return _binbuf_realizedollsym(
      s,
      ac,
      av,
      tonew,
    );
  }

  late final _binbuf_realizedollsym_ptr =
      _lookup<ffi.NativeFunction<_c_binbuf_realizedollsym>>(
          'binbuf_realizedollsym');
  late final _dart_binbuf_realizedollsym _binbuf_realizedollsym =
      _binbuf_realizedollsym_ptr.asFunction<_dart_binbuf_realizedollsym>();

  ffi.Pointer<_clock> clock_new(
    ffi.Pointer<ffi.Void> owner,
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ) {
    return _clock_new(
      owner,
      fn,
    );
  }

  late final _clock_new_ptr =
      _lookup<ffi.NativeFunction<_c_clock_new>>('clock_new');
  late final _dart_clock_new _clock_new =
      _clock_new_ptr.asFunction<_dart_clock_new>();

  void clock_set(
    ffi.Pointer<_clock> x,
    double systime,
  ) {
    return _clock_set(
      x,
      systime,
    );
  }

  late final _clock_set_ptr =
      _lookup<ffi.NativeFunction<_c_clock_set>>('clock_set');
  late final _dart_clock_set _clock_set =
      _clock_set_ptr.asFunction<_dart_clock_set>();

  void clock_delay(
    ffi.Pointer<_clock> x,
    double delaytime,
  ) {
    return _clock_delay(
      x,
      delaytime,
    );
  }

  late final _clock_delay_ptr =
      _lookup<ffi.NativeFunction<_c_clock_delay>>('clock_delay');
  late final _dart_clock_delay _clock_delay =
      _clock_delay_ptr.asFunction<_dart_clock_delay>();

  void clock_unset(
    ffi.Pointer<_clock> x,
  ) {
    return _clock_unset(
      x,
    );
  }

  late final _clock_unset_ptr =
      _lookup<ffi.NativeFunction<_c_clock_unset>>('clock_unset');
  late final _dart_clock_unset _clock_unset =
      _clock_unset_ptr.asFunction<_dart_clock_unset>();

  void clock_setunit(
    ffi.Pointer<_clock> x,
    double timeunit,
    int sampflag,
  ) {
    return _clock_setunit(
      x,
      timeunit,
      sampflag,
    );
  }

  late final _clock_setunit_ptr =
      _lookup<ffi.NativeFunction<_c_clock_setunit>>('clock_setunit');
  late final _dart_clock_setunit _clock_setunit =
      _clock_setunit_ptr.asFunction<_dart_clock_setunit>();

  double clock_getlogicaltime() {
    return _clock_getlogicaltime();
  }

  late final _clock_getlogicaltime_ptr =
      _lookup<ffi.NativeFunction<_c_clock_getlogicaltime>>(
          'clock_getlogicaltime');
  late final _dart_clock_getlogicaltime _clock_getlogicaltime =
      _clock_getlogicaltime_ptr.asFunction<_dart_clock_getlogicaltime>();

  double clock_getsystime() {
    return _clock_getsystime();
  }

  late final _clock_getsystime_ptr =
      _lookup<ffi.NativeFunction<_c_clock_getsystime>>('clock_getsystime');
  late final _dart_clock_getsystime _clock_getsystime =
      _clock_getsystime_ptr.asFunction<_dart_clock_getsystime>();

  double clock_gettimesince(
    double prevsystime,
  ) {
    return _clock_gettimesince(
      prevsystime,
    );
  }

  late final _clock_gettimesince_ptr =
      _lookup<ffi.NativeFunction<_c_clock_gettimesince>>('clock_gettimesince');
  late final _dart_clock_gettimesince _clock_gettimesince =
      _clock_gettimesince_ptr.asFunction<_dart_clock_gettimesince>();

  double clock_gettimesincewithunits(
    double prevsystime,
    double units,
    int sampflag,
  ) {
    return _clock_gettimesincewithunits(
      prevsystime,
      units,
      sampflag,
    );
  }

  late final _clock_gettimesincewithunits_ptr =
      _lookup<ffi.NativeFunction<_c_clock_gettimesincewithunits>>(
          'clock_gettimesincewithunits');
  late final _dart_clock_gettimesincewithunits _clock_gettimesincewithunits =
      _clock_gettimesincewithunits_ptr
          .asFunction<_dart_clock_gettimesincewithunits>();

  double clock_getsystimeafter(
    double delaytime,
  ) {
    return _clock_getsystimeafter(
      delaytime,
    );
  }

  late final _clock_getsystimeafter_ptr =
      _lookup<ffi.NativeFunction<_c_clock_getsystimeafter>>(
          'clock_getsystimeafter');
  late final _dart_clock_getsystimeafter _clock_getsystimeafter =
      _clock_getsystimeafter_ptr.asFunction<_dart_clock_getsystimeafter>();

  void clock_free(
    ffi.Pointer<_clock> x,
  ) {
    return _clock_free(
      x,
    );
  }

  late final _clock_free_ptr =
      _lookup<ffi.NativeFunction<_c_clock_free>>('clock_free');
  late final _dart_clock_free _clock_free =
      _clock_free_ptr.asFunction<_dart_clock_free>();

  ffi.Pointer<ffi.Pointer<_class>> pd_new(
    ffi.Pointer<_class> cls,
  ) {
    return _pd_new(
      cls,
    );
  }

  late final _pd_new_ptr = _lookup<ffi.NativeFunction<_c_pd_new>>('pd_new');
  late final _dart_pd_new _pd_new = _pd_new_ptr.asFunction<_dart_pd_new>();

  void pd_free(
    ffi.Pointer<ffi.Pointer<_class>> x,
  ) {
    return _pd_free(
      x,
    );
  }

  late final _pd_free_ptr = _lookup<ffi.NativeFunction<_c_pd_free>>('pd_free');
  late final _dart_pd_free _pd_free = _pd_free_ptr.asFunction<_dart_pd_free>();

  void pd_bind(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
  ) {
    return _pd_bind(
      x,
      s,
    );
  }

  late final _pd_bind_ptr = _lookup<ffi.NativeFunction<_c_pd_bind>>('pd_bind');
  late final _dart_pd_bind _pd_bind = _pd_bind_ptr.asFunction<_dart_pd_bind>();

  void pd_unbind(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
  ) {
    return _pd_unbind(
      x,
      s,
    );
  }

  late final _pd_unbind_ptr =
      _lookup<ffi.NativeFunction<_c_pd_unbind>>('pd_unbind');
  late final _dart_pd_unbind _pd_unbind =
      _pd_unbind_ptr.asFunction<_dart_pd_unbind>();

  ffi.Pointer<ffi.Pointer<_class>> pd_findbyclass(
    ffi.Pointer<t_symbol> s,
    ffi.Pointer<_class> c,
  ) {
    return _pd_findbyclass(
      s,
      c,
    );
  }

  late final _pd_findbyclass_ptr =
      _lookup<ffi.NativeFunction<_c_pd_findbyclass>>('pd_findbyclass');
  late final _dart_pd_findbyclass _pd_findbyclass =
      _pd_findbyclass_ptr.asFunction<_dart_pd_findbyclass>();

  void pd_pushsym(
    ffi.Pointer<ffi.Pointer<_class>> x,
  ) {
    return _pd_pushsym(
      x,
    );
  }

  late final _pd_pushsym_ptr =
      _lookup<ffi.NativeFunction<_c_pd_pushsym>>('pd_pushsym');
  late final _dart_pd_pushsym _pd_pushsym =
      _pd_pushsym_ptr.asFunction<_dart_pd_pushsym>();

  void pd_popsym(
    ffi.Pointer<ffi.Pointer<_class>> x,
  ) {
    return _pd_popsym(
      x,
    );
  }

  late final _pd_popsym_ptr =
      _lookup<ffi.NativeFunction<_c_pd_popsym>>('pd_popsym');
  late final _dart_pd_popsym _pd_popsym =
      _pd_popsym_ptr.asFunction<_dart_pd_popsym>();

  void pd_bang(
    ffi.Pointer<ffi.Pointer<_class>> x,
  ) {
    return _pd_bang(
      x,
    );
  }

  late final _pd_bang_ptr = _lookup<ffi.NativeFunction<_c_pd_bang>>('pd_bang');
  late final _dart_pd_bang _pd_bang = _pd_bang_ptr.asFunction<_dart_pd_bang>();

  void pd_pointer(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_gpointer> gp,
  ) {
    return _pd_pointer(
      x,
      gp,
    );
  }

  late final _pd_pointer_ptr =
      _lookup<ffi.NativeFunction<_c_pd_pointer>>('pd_pointer');
  late final _dart_pd_pointer _pd_pointer =
      _pd_pointer_ptr.asFunction<_dart_pd_pointer>();

  void pd_float(
    ffi.Pointer<ffi.Pointer<_class>> x,
    double f,
  ) {
    return _pd_float(
      x,
      f,
    );
  }

  late final _pd_float_ptr =
      _lookup<ffi.NativeFunction<_c_pd_float>>('pd_float');
  late final _dart_pd_float _pd_float =
      _pd_float_ptr.asFunction<_dart_pd_float>();

  void pd_symbol(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
  ) {
    return _pd_symbol(
      x,
      s,
    );
  }

  late final _pd_symbol_ptr =
      _lookup<ffi.NativeFunction<_c_pd_symbol>>('pd_symbol');
  late final _dart_pd_symbol _pd_symbol =
      _pd_symbol_ptr.asFunction<_dart_pd_symbol>();

  void pd_list(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _pd_list(
      x,
      s,
      argc,
      argv,
    );
  }

  late final _pd_list_ptr = _lookup<ffi.NativeFunction<_c_pd_list>>('pd_list');
  late final _dart_pd_list _pd_list = _pd_list_ptr.asFunction<_dart_pd_list>();

  void pd_anything(
    ffi.Pointer<ffi.Pointer<_class>> x,
    ffi.Pointer<t_symbol> s,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _pd_anything(
      x,
      s,
      argc,
      argv,
    );
  }

  late final _pd_anything_ptr =
      _lookup<ffi.NativeFunction<_c_pd_anything>>('pd_anything');
  late final _dart_pd_anything _pd_anything =
      _pd_anything_ptr.asFunction<_dart_pd_anything>();

  void gpointer_init(
    ffi.Pointer<t_gpointer> gp,
  ) {
    return _gpointer_init(
      gp,
    );
  }

  late final _gpointer_init_ptr =
      _lookup<ffi.NativeFunction<_c_gpointer_init>>('gpointer_init');
  late final _dart_gpointer_init _gpointer_init =
      _gpointer_init_ptr.asFunction<_dart_gpointer_init>();

  void gpointer_copy(
    ffi.Pointer<t_gpointer> gpfrom,
    ffi.Pointer<t_gpointer> gpto,
  ) {
    return _gpointer_copy(
      gpfrom,
      gpto,
    );
  }

  late final _gpointer_copy_ptr =
      _lookup<ffi.NativeFunction<_c_gpointer_copy>>('gpointer_copy');
  late final _dart_gpointer_copy _gpointer_copy =
      _gpointer_copy_ptr.asFunction<_dart_gpointer_copy>();

  void gpointer_unset(
    ffi.Pointer<t_gpointer> gp,
  ) {
    return _gpointer_unset(
      gp,
    );
  }

  late final _gpointer_unset_ptr =
      _lookup<ffi.NativeFunction<_c_gpointer_unset>>('gpointer_unset');
  late final _dart_gpointer_unset _gpointer_unset =
      _gpointer_unset_ptr.asFunction<_dart_gpointer_unset>();

  int gpointer_check(
    ffi.Pointer<t_gpointer> gp,
    int headok,
  ) {
    return _gpointer_check(
      gp,
      headok,
    );
  }

  late final _gpointer_check_ptr =
      _lookup<ffi.NativeFunction<_c_gpointer_check>>('gpointer_check');
  late final _dart_gpointer_check _gpointer_check =
      _gpointer_check_ptr.asFunction<_dart_gpointer_check>();

  ffi.Pointer<_inlet> inlet_new(
    ffi.Pointer<t_text> owner,
    ffi.Pointer<ffi.Pointer<_class>> dest,
    ffi.Pointer<t_symbol> s1,
    ffi.Pointer<t_symbol> s2,
  ) {
    return _inlet_new(
      owner,
      dest,
      s1,
      s2,
    );
  }

  late final _inlet_new_ptr =
      _lookup<ffi.NativeFunction<_c_inlet_new>>('inlet_new');
  late final _dart_inlet_new _inlet_new =
      _inlet_new_ptr.asFunction<_dart_inlet_new>();

  ffi.Pointer<_inlet> pointerinlet_new(
    ffi.Pointer<t_text> owner,
    ffi.Pointer<t_gpointer> gp,
  ) {
    return _pointerinlet_new(
      owner,
      gp,
    );
  }

  late final _pointerinlet_new_ptr =
      _lookup<ffi.NativeFunction<_c_pointerinlet_new>>('pointerinlet_new');
  late final _dart_pointerinlet_new _pointerinlet_new =
      _pointerinlet_new_ptr.asFunction<_dart_pointerinlet_new>();

  ffi.Pointer<_inlet> floatinlet_new(
    ffi.Pointer<t_text> owner,
    ffi.Pointer<ffi.Float> fp,
  ) {
    return _floatinlet_new(
      owner,
      fp,
    );
  }

  late final _floatinlet_new_ptr =
      _lookup<ffi.NativeFunction<_c_floatinlet_new>>('floatinlet_new');
  late final _dart_floatinlet_new _floatinlet_new =
      _floatinlet_new_ptr.asFunction<_dart_floatinlet_new>();

  ffi.Pointer<_inlet> symbolinlet_new(
    ffi.Pointer<t_text> owner,
    ffi.Pointer<ffi.Pointer<t_symbol>> sp,
  ) {
    return _symbolinlet_new(
      owner,
      sp,
    );
  }

  late final _symbolinlet_new_ptr =
      _lookup<ffi.NativeFunction<_c_symbolinlet_new>>('symbolinlet_new');
  late final _dart_symbolinlet_new _symbolinlet_new =
      _symbolinlet_new_ptr.asFunction<_dart_symbolinlet_new>();

  ffi.Pointer<_inlet> signalinlet_new(
    ffi.Pointer<t_text> owner,
    double f,
  ) {
    return _signalinlet_new(
      owner,
      f,
    );
  }

  late final _signalinlet_new_ptr =
      _lookup<ffi.NativeFunction<_c_signalinlet_new>>('signalinlet_new');
  late final _dart_signalinlet_new _signalinlet_new =
      _signalinlet_new_ptr.asFunction<_dart_signalinlet_new>();

  void inlet_free(
    ffi.Pointer<_inlet> x,
  ) {
    return _inlet_free(
      x,
    );
  }

  late final _inlet_free_ptr =
      _lookup<ffi.NativeFunction<_c_inlet_free>>('inlet_free');
  late final _dart_inlet_free _inlet_free =
      _inlet_free_ptr.asFunction<_dart_inlet_free>();

  ffi.Pointer<_outlet> outlet_new(
    ffi.Pointer<t_text> owner,
    ffi.Pointer<t_symbol> s,
  ) {
    return _outlet_new(
      owner,
      s,
    );
  }

  late final _outlet_new_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_new>>('outlet_new');
  late final _dart_outlet_new _outlet_new =
      _outlet_new_ptr.asFunction<_dart_outlet_new>();

  void outlet_bang(
    ffi.Pointer<_outlet> x,
  ) {
    return _outlet_bang(
      x,
    );
  }

  late final _outlet_bang_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_bang>>('outlet_bang');
  late final _dart_outlet_bang _outlet_bang =
      _outlet_bang_ptr.asFunction<_dart_outlet_bang>();

  void outlet_pointer(
    ffi.Pointer<_outlet> x,
    ffi.Pointer<t_gpointer> gp,
  ) {
    return _outlet_pointer(
      x,
      gp,
    );
  }

  late final _outlet_pointer_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_pointer>>('outlet_pointer');
  late final _dart_outlet_pointer _outlet_pointer =
      _outlet_pointer_ptr.asFunction<_dart_outlet_pointer>();

  void outlet_float(
    ffi.Pointer<_outlet> x,
    double f,
  ) {
    return _outlet_float(
      x,
      f,
    );
  }

  late final _outlet_float_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_float>>('outlet_float');
  late final _dart_outlet_float _outlet_float =
      _outlet_float_ptr.asFunction<_dart_outlet_float>();

  void outlet_symbol(
    ffi.Pointer<_outlet> x,
    ffi.Pointer<t_symbol> s,
  ) {
    return _outlet_symbol(
      x,
      s,
    );
  }

  late final _outlet_symbol_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_symbol>>('outlet_symbol');
  late final _dart_outlet_symbol _outlet_symbol =
      _outlet_symbol_ptr.asFunction<_dart_outlet_symbol>();

  void outlet_list(
    ffi.Pointer<_outlet> x,
    ffi.Pointer<t_symbol> s,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _outlet_list(
      x,
      s,
      argc,
      argv,
    );
  }

  late final _outlet_list_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_list>>('outlet_list');
  late final _dart_outlet_list _outlet_list =
      _outlet_list_ptr.asFunction<_dart_outlet_list>();

  void outlet_anything(
    ffi.Pointer<_outlet> x,
    ffi.Pointer<t_symbol> s,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _outlet_anything(
      x,
      s,
      argc,
      argv,
    );
  }

  late final _outlet_anything_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_anything>>('outlet_anything');
  late final _dart_outlet_anything _outlet_anything =
      _outlet_anything_ptr.asFunction<_dart_outlet_anything>();

  ffi.Pointer<t_symbol> outlet_getsymbol(
    ffi.Pointer<_outlet> x,
  ) {
    return _outlet_getsymbol(
      x,
    );
  }

  late final _outlet_getsymbol_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_getsymbol>>('outlet_getsymbol');
  late final _dart_outlet_getsymbol _outlet_getsymbol =
      _outlet_getsymbol_ptr.asFunction<_dart_outlet_getsymbol>();

  void outlet_free(
    ffi.Pointer<_outlet> x,
  ) {
    return _outlet_free(
      x,
    );
  }

  late final _outlet_free_ptr =
      _lookup<ffi.NativeFunction<_c_outlet_free>>('outlet_free');
  late final _dart_outlet_free _outlet_free =
      _outlet_free_ptr.asFunction<_dart_outlet_free>();

  ffi.Pointer<t_text> pd_checkobject(
    ffi.Pointer<ffi.Pointer<_class>> x,
  ) {
    return _pd_checkobject(
      x,
    );
  }

  late final _pd_checkobject_ptr =
      _lookup<ffi.NativeFunction<_c_pd_checkobject>>('pd_checkobject');
  late final _dart_pd_checkobject _pd_checkobject =
      _pd_checkobject_ptr.asFunction<_dart_pd_checkobject>();

  void glob_setfilename(
    ffi.Pointer<ffi.Void> dummy,
    ffi.Pointer<t_symbol> name,
    ffi.Pointer<t_symbol> dir,
  ) {
    return _glob_setfilename(
      dummy,
      name,
      dir,
    );
  }

  late final _glob_setfilename_ptr =
      _lookup<ffi.NativeFunction<_c_glob_setfilename>>('glob_setfilename');
  late final _dart_glob_setfilename _glob_setfilename =
      _glob_setfilename_ptr.asFunction<_dart_glob_setfilename>();

  void canvas_setargs(
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _canvas_setargs(
      argc,
      argv,
    );
  }

  late final _canvas_setargs_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_setargs>>('canvas_setargs');
  late final _dart_canvas_setargs _canvas_setargs =
      _canvas_setargs_ptr.asFunction<_dart_canvas_setargs>();

  void canvas_getargs(
    ffi.Pointer<ffi.Int32> argcp,
    ffi.Pointer<ffi.Pointer<t_atom>> argvp,
  ) {
    return _canvas_getargs(
      argcp,
      argvp,
    );
  }

  late final _canvas_getargs_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_getargs>>('canvas_getargs');
  late final _dart_canvas_getargs _canvas_getargs =
      _canvas_getargs_ptr.asFunction<_dart_canvas_getargs>();

  ffi.Pointer<t_symbol> canvas_getcurrentdir() {
    return _canvas_getcurrentdir();
  }

  late final _canvas_getcurrentdir_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_getcurrentdir>>(
          'canvas_getcurrentdir');
  late final _dart_canvas_getcurrentdir _canvas_getcurrentdir =
      _canvas_getcurrentdir_ptr.asFunction<_dart_canvas_getcurrentdir>();

  ffi.Pointer<_glist> canvas_getcurrent() {
    return _canvas_getcurrent();
  }

  late final _canvas_getcurrent_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_getcurrent>>('canvas_getcurrent');
  late final _dart_canvas_getcurrent _canvas_getcurrent =
      _canvas_getcurrent_ptr.asFunction<_dart_canvas_getcurrent>();

  void canvas_makefilename(
    ffi.Pointer<_glist> c,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> result,
    int resultsize,
  ) {
    return _canvas_makefilename(
      c,
      file,
      result,
      resultsize,
    );
  }

  late final _canvas_makefilename_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_makefilename>>(
          'canvas_makefilename');
  late final _dart_canvas_makefilename _canvas_makefilename =
      _canvas_makefilename_ptr.asFunction<_dart_canvas_makefilename>();

  ffi.Pointer<t_symbol> canvas_getdir(
    ffi.Pointer<_glist> x,
  ) {
    return _canvas_getdir(
      x,
    );
  }

  late final _canvas_getdir_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_getdir>>('canvas_getdir');
  late final _dart_canvas_getdir _canvas_getdir =
      _canvas_getdir_ptr.asFunction<_dart_canvas_getdir>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _sys_font =
      _lookup<ffi.Pointer<ffi.Int8>>('sys_font');

  ffi.Pointer<ffi.Int8> get sys_font => _sys_font.value;

  set sys_font(ffi.Pointer<ffi.Int8> value) => _sys_font.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _sys_fontweight =
      _lookup<ffi.Pointer<ffi.Int8>>('sys_fontweight');

  ffi.Pointer<ffi.Int8> get sys_fontweight => _sys_fontweight.value;

  set sys_fontweight(ffi.Pointer<ffi.Int8> value) =>
      _sys_fontweight.value = value;

  int sys_hostfontsize(
    int fontsize,
    int zoom,
  ) {
    return _sys_hostfontsize(
      fontsize,
      zoom,
    );
  }

  late final _sys_hostfontsize_ptr =
      _lookup<ffi.NativeFunction<_c_sys_hostfontsize>>('sys_hostfontsize');
  late final _dart_sys_hostfontsize _sys_hostfontsize =
      _sys_hostfontsize_ptr.asFunction<_dart_sys_hostfontsize>();

  int sys_zoomfontwidth(
    int fontsize,
    int zoom,
    int worstcase,
  ) {
    return _sys_zoomfontwidth(
      fontsize,
      zoom,
      worstcase,
    );
  }

  late final _sys_zoomfontwidth_ptr =
      _lookup<ffi.NativeFunction<_c_sys_zoomfontwidth>>('sys_zoomfontwidth');
  late final _dart_sys_zoomfontwidth _sys_zoomfontwidth =
      _sys_zoomfontwidth_ptr.asFunction<_dart_sys_zoomfontwidth>();

  int sys_zoomfontheight(
    int fontsize,
    int zoom,
    int worstcase,
  ) {
    return _sys_zoomfontheight(
      fontsize,
      zoom,
      worstcase,
    );
  }

  late final _sys_zoomfontheight_ptr =
      _lookup<ffi.NativeFunction<_c_sys_zoomfontheight>>('sys_zoomfontheight');
  late final _dart_sys_zoomfontheight _sys_zoomfontheight =
      _sys_zoomfontheight_ptr.asFunction<_dart_sys_zoomfontheight>();

  int sys_fontwidth(
    int fontsize,
  ) {
    return _sys_fontwidth(
      fontsize,
    );
  }

  late final _sys_fontwidth_ptr =
      _lookup<ffi.NativeFunction<_c_sys_fontwidth>>('sys_fontwidth');
  late final _dart_sys_fontwidth _sys_fontwidth =
      _sys_fontwidth_ptr.asFunction<_dart_sys_fontwidth>();

  int sys_fontheight(
    int fontsize,
  ) {
    return _sys_fontheight(
      fontsize,
    );
  }

  late final _sys_fontheight_ptr =
      _lookup<ffi.NativeFunction<_c_sys_fontheight>>('sys_fontheight');
  late final _dart_sys_fontheight _sys_fontheight =
      _sys_fontheight_ptr.asFunction<_dart_sys_fontheight>();

  void canvas_dataproperties(
    ffi.Pointer<_glist> x,
    ffi.Pointer<t_scalar> sc,
    ffi.Pointer<_binbuf> b,
  ) {
    return _canvas_dataproperties(
      x,
      sc,
      b,
    );
  }

  late final _canvas_dataproperties_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_dataproperties>>(
          'canvas_dataproperties');
  late final _dart_canvas_dataproperties _canvas_dataproperties =
      _canvas_dataproperties_ptr.asFunction<_dart_canvas_dataproperties>();

  int canvas_open(
    ffi.Pointer<_glist> x,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> ext,
    ffi.Pointer<ffi.Int8> dirresult,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> nameresult,
    int size,
    int bin,
  ) {
    return _canvas_open(
      x,
      name,
      ext,
      dirresult,
      nameresult,
      size,
      bin,
    );
  }

  late final _canvas_open_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_open>>('canvas_open');
  late final _dart_canvas_open _canvas_open =
      _canvas_open_ptr.asFunction<_dart_canvas_open>();

  ffi.Pointer<_parentwidgetbehavior> pd_getparentwidget(
    ffi.Pointer<ffi.Pointer<_class>> x,
  ) {
    return _pd_getparentwidget(
      x,
    );
  }

  late final _pd_getparentwidget_ptr =
      _lookup<ffi.NativeFunction<_c_pd_getparentwidget>>('pd_getparentwidget');
  late final _dart_pd_getparentwidget _pd_getparentwidget =
      _pd_getparentwidget_ptr.asFunction<_dart_pd_getparentwidget>();

  ffi.Pointer<_class> class_new(
    ffi.Pointer<t_symbol> name,
    ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
    ffi.Pointer<ffi.NativeFunction<t_method>> freemethod,
    int size,
    int flags,
    int arg1,
  ) {
    return _class_new(
      name,
      newmethod,
      freemethod,
      size,
      flags,
      arg1,
    );
  }

  late final _class_new_ptr =
      _lookup<ffi.NativeFunction<_c_class_new>>('class_new');
  late final _dart_class_new _class_new =
      _class_new_ptr.asFunction<_dart_class_new>();

  ffi.Pointer<_class> class_new64(
    ffi.Pointer<t_symbol> name,
    ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
    ffi.Pointer<ffi.NativeFunction<t_method>> freemethod,
    int size,
    int flags,
    int arg1,
  ) {
    return _class_new64(
      name,
      newmethod,
      freemethod,
      size,
      flags,
      arg1,
    );
  }

  late final _class_new64_ptr =
      _lookup<ffi.NativeFunction<_c_class_new64>>('class_new64');
  late final _dart_class_new64 _class_new64 =
      _class_new64_ptr.asFunction<_dart_class_new64>();

  void class_free(
    ffi.Pointer<_class> c,
  ) {
    return _class_free(
      c,
    );
  }

  late final _class_free_ptr =
      _lookup<ffi.NativeFunction<_c_class_free>>('class_free');
  late final _dart_class_free _class_free =
      _class_free_ptr.asFunction<_dart_class_free>();

  void class_addcreator(
    ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
    ffi.Pointer<t_symbol> s,
    int type1,
  ) {
    return _class_addcreator(
      newmethod,
      s,
      type1,
    );
  }

  late final _class_addcreator_ptr =
      _lookup<ffi.NativeFunction<_c_class_addcreator>>('class_addcreator');
  late final _dart_class_addcreator _class_addcreator =
      _class_addcreator_ptr.asFunction<_dart_class_addcreator>();

  void class_addmethod(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
    ffi.Pointer<t_symbol> sel,
    int arg1,
  ) {
    return _class_addmethod(
      c,
      fn,
      sel,
      arg1,
    );
  }

  late final _class_addmethod_ptr =
      _lookup<ffi.NativeFunction<_c_class_addmethod>>('class_addmethod');
  late final _dart_class_addmethod _class_addmethod =
      _class_addmethod_ptr.asFunction<_dart_class_addmethod>();

  void class_addbang(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ) {
    return _class_addbang(
      c,
      fn,
    );
  }

  late final _class_addbang_ptr =
      _lookup<ffi.NativeFunction<_c_class_addbang>>('class_addbang');
  late final _dart_class_addbang _class_addbang =
      _class_addbang_ptr.asFunction<_dart_class_addbang>();

  void class_addpointer(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ) {
    return _class_addpointer(
      c,
      fn,
    );
  }

  late final _class_addpointer_ptr =
      _lookup<ffi.NativeFunction<_c_class_addpointer>>('class_addpointer');
  late final _dart_class_addpointer _class_addpointer =
      _class_addpointer_ptr.asFunction<_dart_class_addpointer>();

  void class_doaddfloat(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ) {
    return _class_doaddfloat(
      c,
      fn,
    );
  }

  late final _class_doaddfloat_ptr =
      _lookup<ffi.NativeFunction<_c_class_doaddfloat>>('class_doaddfloat');
  late final _dart_class_doaddfloat _class_doaddfloat =
      _class_doaddfloat_ptr.asFunction<_dart_class_doaddfloat>();

  void class_addsymbol(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ) {
    return _class_addsymbol(
      c,
      fn,
    );
  }

  late final _class_addsymbol_ptr =
      _lookup<ffi.NativeFunction<_c_class_addsymbol>>('class_addsymbol');
  late final _dart_class_addsymbol _class_addsymbol =
      _class_addsymbol_ptr.asFunction<_dart_class_addsymbol>();

  void class_addlist(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ) {
    return _class_addlist(
      c,
      fn,
    );
  }

  late final _class_addlist_ptr =
      _lookup<ffi.NativeFunction<_c_class_addlist>>('class_addlist');
  late final _dart_class_addlist _class_addlist =
      _class_addlist_ptr.asFunction<_dart_class_addlist>();

  void class_addanything(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ) {
    return _class_addanything(
      c,
      fn,
    );
  }

  late final _class_addanything_ptr =
      _lookup<ffi.NativeFunction<_c_class_addanything>>('class_addanything');
  late final _dart_class_addanything _class_addanything =
      _class_addanything_ptr.asFunction<_dart_class_addanything>();

  void class_sethelpsymbol(
    ffi.Pointer<_class> c,
    ffi.Pointer<t_symbol> s,
  ) {
    return _class_sethelpsymbol(
      c,
      s,
    );
  }

  late final _class_sethelpsymbol_ptr =
      _lookup<ffi.NativeFunction<_c_class_sethelpsymbol>>(
          'class_sethelpsymbol');
  late final _dart_class_sethelpsymbol _class_sethelpsymbol =
      _class_sethelpsymbol_ptr.asFunction<_dart_class_sethelpsymbol>();

  void class_setwidget(
    ffi.Pointer<_class> c,
    ffi.Pointer<_widgetbehavior> w,
  ) {
    return _class_setwidget(
      c,
      w,
    );
  }

  late final _class_setwidget_ptr =
      _lookup<ffi.NativeFunction<_c_class_setwidget>>('class_setwidget');
  late final _dart_class_setwidget _class_setwidget =
      _class_setwidget_ptr.asFunction<_dart_class_setwidget>();

  void class_setparentwidget(
    ffi.Pointer<_class> c,
    ffi.Pointer<_parentwidgetbehavior> w,
  ) {
    return _class_setparentwidget(
      c,
      w,
    );
  }

  late final _class_setparentwidget_ptr =
      _lookup<ffi.NativeFunction<_c_class_setparentwidget>>(
          'class_setparentwidget');
  late final _dart_class_setparentwidget _class_setparentwidget =
      _class_setparentwidget_ptr.asFunction<_dart_class_setparentwidget>();

  ffi.Pointer<ffi.Int8> class_getname(
    ffi.Pointer<_class> c,
  ) {
    return _class_getname(
      c,
    );
  }

  late final _class_getname_ptr =
      _lookup<ffi.NativeFunction<_c_class_getname>>('class_getname');
  late final _dart_class_getname _class_getname =
      _class_getname_ptr.asFunction<_dart_class_getname>();

  ffi.Pointer<ffi.Int8> class_gethelpname(
    ffi.Pointer<_class> c,
  ) {
    return _class_gethelpname(
      c,
    );
  }

  late final _class_gethelpname_ptr =
      _lookup<ffi.NativeFunction<_c_class_gethelpname>>('class_gethelpname');
  late final _dart_class_gethelpname _class_gethelpname =
      _class_gethelpname_ptr.asFunction<_dart_class_gethelpname>();

  ffi.Pointer<ffi.Int8> class_gethelpdir(
    ffi.Pointer<_class> c,
  ) {
    return _class_gethelpdir(
      c,
    );
  }

  late final _class_gethelpdir_ptr =
      _lookup<ffi.NativeFunction<_c_class_gethelpdir>>('class_gethelpdir');
  late final _dart_class_gethelpdir _class_gethelpdir =
      _class_gethelpdir_ptr.asFunction<_dart_class_gethelpdir>();

  void class_setdrawcommand(
    ffi.Pointer<_class> c,
  ) {
    return _class_setdrawcommand(
      c,
    );
  }

  late final _class_setdrawcommand_ptr =
      _lookup<ffi.NativeFunction<_c_class_setdrawcommand>>(
          'class_setdrawcommand');
  late final _dart_class_setdrawcommand _class_setdrawcommand =
      _class_setdrawcommand_ptr.asFunction<_dart_class_setdrawcommand>();

  int class_isdrawcommand(
    ffi.Pointer<_class> c,
  ) {
    return _class_isdrawcommand(
      c,
    );
  }

  late final _class_isdrawcommand_ptr =
      _lookup<ffi.NativeFunction<_c_class_isdrawcommand>>(
          'class_isdrawcommand');
  late final _dart_class_isdrawcommand _class_isdrawcommand =
      _class_isdrawcommand_ptr.asFunction<_dart_class_isdrawcommand>();

  void class_domainsignalin(
    ffi.Pointer<_class> c,
    int onset,
  ) {
    return _class_domainsignalin(
      c,
      onset,
    );
  }

  late final _class_domainsignalin_ptr =
      _lookup<ffi.NativeFunction<_c_class_domainsignalin>>(
          'class_domainsignalin');
  late final _dart_class_domainsignalin _class_domainsignalin =
      _class_domainsignalin_ptr.asFunction<_dart_class_domainsignalin>();

  void class_set_extern_dir(
    ffi.Pointer<t_symbol> s,
  ) {
    return _class_set_extern_dir(
      s,
    );
  }

  late final _class_set_extern_dir_ptr =
      _lookup<ffi.NativeFunction<_c_class_set_extern_dir>>(
          'class_set_extern_dir');
  late final _dart_class_set_extern_dir _class_set_extern_dir =
      _class_set_extern_dir_ptr.asFunction<_dart_class_set_extern_dir>();

  void class_setsavefn(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_savefn>> f,
  ) {
    return _class_setsavefn(
      c,
      f,
    );
  }

  late final _class_setsavefn_ptr =
      _lookup<ffi.NativeFunction<_c_class_setsavefn>>('class_setsavefn');
  late final _dart_class_setsavefn _class_setsavefn =
      _class_setsavefn_ptr.asFunction<_dart_class_setsavefn>();

  ffi.Pointer<ffi.NativeFunction<t_savefn>> class_getsavefn(
    ffi.Pointer<_class> c,
  ) {
    return _class_getsavefn(
      c,
    );
  }

  late final _class_getsavefn_ptr =
      _lookup<ffi.NativeFunction<_c_class_getsavefn>>('class_getsavefn');
  late final _dart_class_getsavefn _class_getsavefn =
      _class_getsavefn_ptr.asFunction<_dart_class_getsavefn>();

  void obj_saveformat(
    ffi.Pointer<t_text> x,
    ffi.Pointer<_binbuf> bb,
  ) {
    return _obj_saveformat(
      x,
      bb,
    );
  }

  late final _obj_saveformat_ptr =
      _lookup<ffi.NativeFunction<_c_obj_saveformat>>('obj_saveformat');
  late final _dart_obj_saveformat _obj_saveformat =
      _obj_saveformat_ptr.asFunction<_dart_obj_saveformat>();

  void class_setpropertiesfn(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_propertiesfn>> f,
  ) {
    return _class_setpropertiesfn(
      c,
      f,
    );
  }

  late final _class_setpropertiesfn_ptr =
      _lookup<ffi.NativeFunction<_c_class_setpropertiesfn>>(
          'class_setpropertiesfn');
  late final _dart_class_setpropertiesfn _class_setpropertiesfn =
      _class_setpropertiesfn_ptr.asFunction<_dart_class_setpropertiesfn>();

  ffi.Pointer<ffi.NativeFunction<t_propertiesfn>> class_getpropertiesfn(
    ffi.Pointer<_class> c,
  ) {
    return _class_getpropertiesfn(
      c,
    );
  }

  late final _class_getpropertiesfn_ptr =
      _lookup<ffi.NativeFunction<_c_class_getpropertiesfn>>(
          'class_getpropertiesfn');
  late final _dart_class_getpropertiesfn _class_getpropertiesfn =
      _class_getpropertiesfn_ptr.asFunction<_dart_class_getpropertiesfn>();

  void class_setfreefn(
    ffi.Pointer<_class> c,
    ffi.Pointer<ffi.NativeFunction<t_classfreefn>> fn,
  ) {
    return _class_setfreefn(
      c,
      fn,
    );
  }

  late final _class_setfreefn_ptr =
      _lookup<ffi.NativeFunction<_c_class_setfreefn>>('class_setfreefn');
  late final _dart_class_setfreefn _class_setfreefn =
      _class_setfreefn_ptr.asFunction<_dart_class_setfreefn>();

  void post(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _post(
      fmt,
    );
  }

  late final _post_ptr = _lookup<ffi.NativeFunction<_c_post>>('post');
  late final _dart_post _post = _post_ptr.asFunction<_dart_post>();

  void startpost(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _startpost(
      fmt,
    );
  }

  late final _startpost_ptr =
      _lookup<ffi.NativeFunction<_c_startpost>>('startpost');
  late final _dart_startpost _startpost =
      _startpost_ptr.asFunction<_dart_startpost>();

  void poststring(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _poststring(
      s,
    );
  }

  late final _poststring_ptr =
      _lookup<ffi.NativeFunction<_c_poststring>>('poststring');
  late final _dart_poststring _poststring =
      _poststring_ptr.asFunction<_dart_poststring>();

  void postfloat(
    double f,
  ) {
    return _postfloat(
      f,
    );
  }

  late final _postfloat_ptr =
      _lookup<ffi.NativeFunction<_c_postfloat>>('postfloat');
  late final _dart_postfloat _postfloat =
      _postfloat_ptr.asFunction<_dart_postfloat>();

  void postatom(
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _postatom(
      argc,
      argv,
    );
  }

  late final _postatom_ptr =
      _lookup<ffi.NativeFunction<_c_postatom>>('postatom');
  late final _dart_postatom _postatom =
      _postatom_ptr.asFunction<_dart_postatom>();

  void endpost() {
    return _endpost();
  }

  late final _endpost_ptr = _lookup<ffi.NativeFunction<_c_endpost>>('endpost');
  late final _dart_endpost _endpost = _endpost_ptr.asFunction<_dart_endpost>();

  void error(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _error(
      fmt,
    );
  }

  late final _error_ptr = _lookup<ffi.NativeFunction<_c_error>>('error');
  late final _dart_error _error = _error_ptr.asFunction<_dart_error>();

  void verbose(
    int level,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _verbose(
      level,
      fmt,
    );
  }

  late final _verbose_ptr = _lookup<ffi.NativeFunction<_c_verbose>>('verbose');
  late final _dart_verbose _verbose = _verbose_ptr.asFunction<_dart_verbose>();

  void bug(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _bug(
      fmt,
    );
  }

  late final _bug_ptr = _lookup<ffi.NativeFunction<_c_bug>>('bug');
  late final _dart_bug _bug = _bug_ptr.asFunction<_dart_bug>();

  void pd_error(
    ffi.Pointer<ffi.Void> object,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _pd_error(
      object,
      fmt,
    );
  }

  late final _pd_error_ptr =
      _lookup<ffi.NativeFunction<_c_pd_error>>('pd_error');
  late final _dart_pd_error _pd_error =
      _pd_error_ptr.asFunction<_dart_pd_error>();

  void logpost(
    ffi.Pointer<ffi.Void> object,
    int level,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _logpost(
      object,
      level,
      fmt,
    );
  }

  late final _logpost_ptr = _lookup<ffi.NativeFunction<_c_logpost>>('logpost');
  late final _dart_logpost _logpost = _logpost_ptr.asFunction<_dart_logpost>();

  int sys_isabsolutepath(
    ffi.Pointer<ffi.Int8> dir,
  ) {
    return _sys_isabsolutepath(
      dir,
    );
  }

  late final _sys_isabsolutepath_ptr =
      _lookup<ffi.NativeFunction<_c_sys_isabsolutepath>>('sys_isabsolutepath');
  late final _dart_sys_isabsolutepath _sys_isabsolutepath =
      _sys_isabsolutepath_ptr.asFunction<_dart_sys_isabsolutepath>();

  void sys_bashfilename(
    ffi.Pointer<ffi.Int8> from,
    ffi.Pointer<ffi.Int8> to,
  ) {
    return _sys_bashfilename(
      from,
      to,
    );
  }

  late final _sys_bashfilename_ptr =
      _lookup<ffi.NativeFunction<_c_sys_bashfilename>>('sys_bashfilename');
  late final _dart_sys_bashfilename _sys_bashfilename =
      _sys_bashfilename_ptr.asFunction<_dart_sys_bashfilename>();

  void sys_unbashfilename(
    ffi.Pointer<ffi.Int8> from,
    ffi.Pointer<ffi.Int8> to,
  ) {
    return _sys_unbashfilename(
      from,
      to,
    );
  }

  late final _sys_unbashfilename_ptr =
      _lookup<ffi.NativeFunction<_c_sys_unbashfilename>>('sys_unbashfilename');
  late final _dart_sys_unbashfilename _sys_unbashfilename =
      _sys_unbashfilename_ptr.asFunction<_dart_sys_unbashfilename>();

  int open_via_path(
    ffi.Pointer<ffi.Int8> dir,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> ext,
    ffi.Pointer<ffi.Int8> dirresult,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> nameresult,
    int size,
    int bin,
  ) {
    return _open_via_path(
      dir,
      name,
      ext,
      dirresult,
      nameresult,
      size,
      bin,
    );
  }

  late final _open_via_path_ptr =
      _lookup<ffi.NativeFunction<_c_open_via_path>>('open_via_path');
  late final _dart_open_via_path _open_via_path =
      _open_via_path_ptr.asFunction<_dart_open_via_path>();

  int sched_geteventno() {
    return _sched_geteventno();
  }

  late final _sched_geteventno_ptr =
      _lookup<ffi.NativeFunction<_c_sched_geteventno>>('sched_geteventno');
  late final _dart_sched_geteventno _sched_geteventno =
      _sched_geteventno_ptr.asFunction<_dart_sched_geteventno>();

  double sys_getrealtime() {
    return _sys_getrealtime();
  }

  late final _sys_getrealtime_ptr =
      _lookup<ffi.NativeFunction<_c_sys_getrealtime>>('sys_getrealtime');
  late final _dart_sys_getrealtime _sys_getrealtime =
      _sys_getrealtime_ptr.asFunction<_dart_sys_getrealtime>();

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_typedefC_1>>>
      _sys_idlehook =
      _lookup<ffi.Pointer<ffi.NativeFunction<_typedefC_1>>>('sys_idlehook');

  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> get sys_idlehook =>
      _sys_idlehook.value;

  set sys_idlehook(ffi.Pointer<ffi.NativeFunction<_typedefC_1>> value) =>
      _sys_idlehook.value = value;

  int sys_open(
    ffi.Pointer<ffi.Int8> path,
    int oflag,
  ) {
    return _sys_open(
      path,
      oflag,
    );
  }

  late final _sys_open_ptr =
      _lookup<ffi.NativeFunction<_c_sys_open>>('sys_open');
  late final _dart_sys_open _sys_open =
      _sys_open_ptr.asFunction<_dart_sys_open>();

  int sys_close(
    int fd,
  ) {
    return _sys_close(
      fd,
    );
  }

  late final _sys_close_ptr =
      _lookup<ffi.NativeFunction<_c_sys_close>>('sys_close');
  late final _dart_sys_close _sys_close =
      _sys_close_ptr.asFunction<_dart_sys_close>();

  ffi.Pointer<_IO_FILE> sys_fopen(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _sys_fopen(
      filename,
      mode,
    );
  }

  late final _sys_fopen_ptr =
      _lookup<ffi.NativeFunction<_c_sys_fopen>>('sys_fopen');
  late final _dart_sys_fopen _sys_fopen =
      _sys_fopen_ptr.asFunction<_dart_sys_fopen>();

  int sys_fclose(
    ffi.Pointer<_IO_FILE> stream,
  ) {
    return _sys_fclose(
      stream,
    );
  }

  late final _sys_fclose_ptr =
      _lookup<ffi.NativeFunction<_c_sys_fclose>>('sys_fclose');
  late final _dart_sys_fclose _sys_fclose =
      _sys_fclose_ptr.asFunction<_dart_sys_fclose>();

  void sys_lock() {
    return _sys_lock();
  }

  late final _sys_lock_ptr =
      _lookup<ffi.NativeFunction<_c_sys_lock>>('sys_lock');
  late final _dart_sys_lock _sys_lock =
      _sys_lock_ptr.asFunction<_dart_sys_lock>();

  void sys_unlock() {
    return _sys_unlock();
  }

  late final _sys_unlock_ptr =
      _lookup<ffi.NativeFunction<_c_sys_unlock>>('sys_unlock');
  late final _dart_sys_unlock _sys_unlock =
      _sys_unlock_ptr.asFunction<_dart_sys_unlock>();

  int sys_trylock() {
    return _sys_trylock();
  }

  late final _sys_trylock_ptr =
      _lookup<ffi.NativeFunction<_c_sys_trylock>>('sys_trylock');
  late final _dart_sys_trylock _sys_trylock =
      _sys_trylock_ptr.asFunction<_dart_sys_trylock>();

  ffi.Pointer<ffi.Int64> plus_perform(
    ffi.Pointer<ffi.Int64> args,
  ) {
    return _plus_perform(
      args,
    );
  }

  late final _plus_perform_ptr =
      _lookup<ffi.NativeFunction<_c_plus_perform>>('plus_perform');
  late final _dart_plus_perform _plus_perform =
      _plus_perform_ptr.asFunction<_dart_plus_perform>();

  ffi.Pointer<ffi.Int64> zero_perform(
    ffi.Pointer<ffi.Int64> args,
  ) {
    return _zero_perform(
      args,
    );
  }

  late final _zero_perform_ptr =
      _lookup<ffi.NativeFunction<_c_zero_perform>>('zero_perform');
  late final _dart_zero_perform _zero_perform =
      _zero_perform_ptr.asFunction<_dart_zero_perform>();

  ffi.Pointer<ffi.Int64> copy_perform(
    ffi.Pointer<ffi.Int64> args,
  ) {
    return _copy_perform(
      args,
    );
  }

  late final _copy_perform_ptr =
      _lookup<ffi.NativeFunction<_c_copy_perform>>('copy_perform');
  late final _dart_copy_perform _copy_perform =
      _copy_perform_ptr.asFunction<_dart_copy_perform>();

  void dsp_add_plus(
    ffi.Pointer<ffi.Float> in1,
    ffi.Pointer<ffi.Float> in2,
    ffi.Pointer<ffi.Float> out,
    int n,
  ) {
    return _dsp_add_plus(
      in1,
      in2,
      out,
      n,
    );
  }

  late final _dsp_add_plus_ptr =
      _lookup<ffi.NativeFunction<_c_dsp_add_plus>>('dsp_add_plus');
  late final _dart_dsp_add_plus _dsp_add_plus =
      _dsp_add_plus_ptr.asFunction<_dart_dsp_add_plus>();

  void dsp_add_copy(
    ffi.Pointer<ffi.Float> in_1,
    ffi.Pointer<ffi.Float> out,
    int n,
  ) {
    return _dsp_add_copy(
      in_1,
      out,
      n,
    );
  }

  late final _dsp_add_copy_ptr =
      _lookup<ffi.NativeFunction<_c_dsp_add_copy>>('dsp_add_copy');
  late final _dart_dsp_add_copy _dsp_add_copy =
      _dsp_add_copy_ptr.asFunction<_dart_dsp_add_copy>();

  void dsp_add_scalarcopy(
    ffi.Pointer<ffi.Float> in_1,
    ffi.Pointer<ffi.Float> out,
    int n,
  ) {
    return _dsp_add_scalarcopy(
      in_1,
      out,
      n,
    );
  }

  late final _dsp_add_scalarcopy_ptr =
      _lookup<ffi.NativeFunction<_c_dsp_add_scalarcopy>>('dsp_add_scalarcopy');
  late final _dart_dsp_add_scalarcopy _dsp_add_scalarcopy =
      _dsp_add_scalarcopy_ptr.asFunction<_dart_dsp_add_scalarcopy>();

  void dsp_add_zero(
    ffi.Pointer<ffi.Float> out,
    int n,
  ) {
    return _dsp_add_zero(
      out,
      n,
    );
  }

  late final _dsp_add_zero_ptr =
      _lookup<ffi.NativeFunction<_c_dsp_add_zero>>('dsp_add_zero');
  late final _dart_dsp_add_zero _dsp_add_zero =
      _dsp_add_zero_ptr.asFunction<_dart_dsp_add_zero>();

  int sys_getblksize() {
    return _sys_getblksize();
  }

  late final _sys_getblksize_ptr =
      _lookup<ffi.NativeFunction<_c_sys_getblksize>>('sys_getblksize');
  late final _dart_sys_getblksize _sys_getblksize =
      _sys_getblksize_ptr.asFunction<_dart_sys_getblksize>();

  double sys_getsr() {
    return _sys_getsr();
  }

  late final _sys_getsr_ptr =
      _lookup<ffi.NativeFunction<_c_sys_getsr>>('sys_getsr');
  late final _dart_sys_getsr _sys_getsr =
      _sys_getsr_ptr.asFunction<_dart_sys_getsr>();

  int sys_get_inchannels() {
    return _sys_get_inchannels();
  }

  late final _sys_get_inchannels_ptr =
      _lookup<ffi.NativeFunction<_c_sys_get_inchannels>>('sys_get_inchannels');
  late final _dart_sys_get_inchannels _sys_get_inchannels =
      _sys_get_inchannels_ptr.asFunction<_dart_sys_get_inchannels>();

  int sys_get_outchannels() {
    return _sys_get_outchannels();
  }

  late final _sys_get_outchannels_ptr =
      _lookup<ffi.NativeFunction<_c_sys_get_outchannels>>(
          'sys_get_outchannels');
  late final _dart_sys_get_outchannels _sys_get_outchannels =
      _sys_get_outchannels_ptr.asFunction<_dart_sys_get_outchannels>();

  void dsp_add(
    ffi.Pointer<ffi.NativeFunction<t_perfroutine>> f,
    int n,
  ) {
    return _dsp_add(
      f,
      n,
    );
  }

  late final _dsp_add_ptr = _lookup<ffi.NativeFunction<_c_dsp_add>>('dsp_add');
  late final _dart_dsp_add _dsp_add = _dsp_add_ptr.asFunction<_dart_dsp_add>();

  void dsp_addv(
    ffi.Pointer<ffi.NativeFunction<t_perfroutine>> f,
    int n,
    ffi.Pointer<ffi.Int64> vec,
  ) {
    return _dsp_addv(
      f,
      n,
      vec,
    );
  }

  late final _dsp_addv_ptr =
      _lookup<ffi.NativeFunction<_c_dsp_addv>>('dsp_addv');
  late final _dart_dsp_addv _dsp_addv =
      _dsp_addv_ptr.asFunction<_dart_dsp_addv>();

  void pd_fft(
    ffi.Pointer<ffi.Float> buf,
    int npoints,
    int inverse,
  ) {
    return _pd_fft(
      buf,
      npoints,
      inverse,
    );
  }

  late final _pd_fft_ptr = _lookup<ffi.NativeFunction<_c_pd_fft>>('pd_fft');
  late final _dart_pd_fft _pd_fft = _pd_fft_ptr.asFunction<_dart_pd_fft>();

  int ilog2(
    int n,
  ) {
    return _ilog2(
      n,
    );
  }

  late final _ilog2_ptr = _lookup<ffi.NativeFunction<_c_ilog2>>('ilog2');
  late final _dart_ilog2 _ilog2 = _ilog2_ptr.asFunction<_dart_ilog2>();

  void mayer_fht(
    ffi.Pointer<ffi.Float> fz,
    int n,
  ) {
    return _mayer_fht(
      fz,
      n,
    );
  }

  late final _mayer_fht_ptr =
      _lookup<ffi.NativeFunction<_c_mayer_fht>>('mayer_fht');
  late final _dart_mayer_fht _mayer_fht =
      _mayer_fht_ptr.asFunction<_dart_mayer_fht>();

  void mayer_fft(
    int n,
    ffi.Pointer<ffi.Float> real,
    ffi.Pointer<ffi.Float> imag,
  ) {
    return _mayer_fft(
      n,
      real,
      imag,
    );
  }

  late final _mayer_fft_ptr =
      _lookup<ffi.NativeFunction<_c_mayer_fft>>('mayer_fft');
  late final _dart_mayer_fft _mayer_fft =
      _mayer_fft_ptr.asFunction<_dart_mayer_fft>();

  void mayer_ifft(
    int n,
    ffi.Pointer<ffi.Float> real,
    ffi.Pointer<ffi.Float> imag,
  ) {
    return _mayer_ifft(
      n,
      real,
      imag,
    );
  }

  late final _mayer_ifft_ptr =
      _lookup<ffi.NativeFunction<_c_mayer_ifft>>('mayer_ifft');
  late final _dart_mayer_ifft _mayer_ifft =
      _mayer_ifft_ptr.asFunction<_dart_mayer_ifft>();

  void mayer_realfft(
    int n,
    ffi.Pointer<ffi.Float> real,
  ) {
    return _mayer_realfft(
      n,
      real,
    );
  }

  late final _mayer_realfft_ptr =
      _lookup<ffi.NativeFunction<_c_mayer_realfft>>('mayer_realfft');
  late final _dart_mayer_realfft _mayer_realfft =
      _mayer_realfft_ptr.asFunction<_dart_mayer_realfft>();

  void mayer_realifft(
    int n,
    ffi.Pointer<ffi.Float> real,
  ) {
    return _mayer_realifft(
      n,
      real,
    );
  }

  late final _mayer_realifft_ptr =
      _lookup<ffi.NativeFunction<_c_mayer_realifft>>('mayer_realifft');
  late final _dart_mayer_realifft _mayer_realifft =
      _mayer_realifft_ptr.asFunction<_dart_mayer_realifft>();

  late final ffi.Pointer<ffi.Pointer<ffi.Float>> _cos_table =
      _lookup<ffi.Pointer<ffi.Float>>('cos_table');

  ffi.Pointer<ffi.Float> get cos_table => _cos_table.value;

  set cos_table(ffi.Pointer<ffi.Float> value) => _cos_table.value = value;

  int canvas_suspend_dsp() {
    return _canvas_suspend_dsp();
  }

  late final _canvas_suspend_dsp_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_suspend_dsp>>('canvas_suspend_dsp');
  late final _dart_canvas_suspend_dsp _canvas_suspend_dsp =
      _canvas_suspend_dsp_ptr.asFunction<_dart_canvas_suspend_dsp>();

  void canvas_resume_dsp(
    int oldstate,
  ) {
    return _canvas_resume_dsp(
      oldstate,
    );
  }

  late final _canvas_resume_dsp_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_resume_dsp>>('canvas_resume_dsp');
  late final _dart_canvas_resume_dsp _canvas_resume_dsp =
      _canvas_resume_dsp_ptr.asFunction<_dart_canvas_resume_dsp>();

  void canvas_update_dsp() {
    return _canvas_update_dsp();
  }

  late final _canvas_update_dsp_ptr =
      _lookup<ffi.NativeFunction<_c_canvas_update_dsp>>('canvas_update_dsp');
  late final _dart_canvas_update_dsp _canvas_update_dsp =
      _canvas_update_dsp_ptr.asFunction<_dart_canvas_update_dsp>();

  late final ffi.Pointer<ffi.Int32> _canvas_dspstate =
      _lookup<ffi.Int32>('canvas_dspstate');

  int get canvas_dspstate => _canvas_dspstate.value;

  set canvas_dspstate(int value) => _canvas_dspstate.value = value;

  void resample_init(
    ffi.Pointer<t_resample> x,
  ) {
    return _resample_init(
      x,
    );
  }

  late final _resample_init_ptr =
      _lookup<ffi.NativeFunction<_c_resample_init>>('resample_init');
  late final _dart_resample_init _resample_init =
      _resample_init_ptr.asFunction<_dart_resample_init>();

  void resample_free(
    ffi.Pointer<t_resample> x,
  ) {
    return _resample_free(
      x,
    );
  }

  late final _resample_free_ptr =
      _lookup<ffi.NativeFunction<_c_resample_free>>('resample_free');
  late final _dart_resample_free _resample_free =
      _resample_free_ptr.asFunction<_dart_resample_free>();

  void resample_dsp(
    ffi.Pointer<t_resample> x,
    ffi.Pointer<ffi.Float> in_1,
    int insize,
    ffi.Pointer<ffi.Float> out,
    int outsize,
    int method,
  ) {
    return _resample_dsp(
      x,
      in_1,
      insize,
      out,
      outsize,
      method,
    );
  }

  late final _resample_dsp_ptr =
      _lookup<ffi.NativeFunction<_c_resample_dsp>>('resample_dsp');
  late final _dart_resample_dsp _resample_dsp =
      _resample_dsp_ptr.asFunction<_dart_resample_dsp>();

  void resamplefrom_dsp(
    ffi.Pointer<t_resample> x,
    ffi.Pointer<ffi.Float> in_1,
    int insize,
    int outsize,
    int method,
  ) {
    return _resamplefrom_dsp(
      x,
      in_1,
      insize,
      outsize,
      method,
    );
  }

  late final _resamplefrom_dsp_ptr =
      _lookup<ffi.NativeFunction<_c_resamplefrom_dsp>>('resamplefrom_dsp');
  late final _dart_resamplefrom_dsp _resamplefrom_dsp =
      _resamplefrom_dsp_ptr.asFunction<_dart_resamplefrom_dsp>();

  void resampleto_dsp(
    ffi.Pointer<t_resample> x,
    ffi.Pointer<ffi.Float> out,
    int insize,
    int outsize,
    int method,
  ) {
    return _resampleto_dsp(
      x,
      out,
      insize,
      outsize,
      method,
    );
  }

  late final _resampleto_dsp_ptr =
      _lookup<ffi.NativeFunction<_c_resampleto_dsp>>('resampleto_dsp');
  late final _dart_resampleto_dsp _resampleto_dsp =
      _resampleto_dsp_ptr.asFunction<_dart_resampleto_dsp>();

  double mtof(
    double arg0,
  ) {
    return _mtof(
      arg0,
    );
  }

  late final _mtof_ptr = _lookup<ffi.NativeFunction<_c_mtof>>('mtof');
  late final _dart_mtof _mtof = _mtof_ptr.asFunction<_dart_mtof>();

  double ftom(
    double arg0,
  ) {
    return _ftom(
      arg0,
    );
  }

  late final _ftom_ptr = _lookup<ffi.NativeFunction<_c_ftom>>('ftom');
  late final _dart_ftom _ftom = _ftom_ptr.asFunction<_dart_ftom>();

  double rmstodb(
    double arg0,
  ) {
    return _rmstodb(
      arg0,
    );
  }

  late final _rmstodb_ptr = _lookup<ffi.NativeFunction<_c_rmstodb>>('rmstodb');
  late final _dart_rmstodb _rmstodb = _rmstodb_ptr.asFunction<_dart_rmstodb>();

  double powtodb(
    double arg0,
  ) {
    return _powtodb(
      arg0,
    );
  }

  late final _powtodb_ptr = _lookup<ffi.NativeFunction<_c_powtodb>>('powtodb');
  late final _dart_powtodb _powtodb = _powtodb_ptr.asFunction<_dart_powtodb>();

  double dbtorms(
    double arg0,
  ) {
    return _dbtorms(
      arg0,
    );
  }

  late final _dbtorms_ptr = _lookup<ffi.NativeFunction<_c_dbtorms>>('dbtorms');
  late final _dart_dbtorms _dbtorms = _dbtorms_ptr.asFunction<_dart_dbtorms>();

  double dbtopow(
    double arg0,
  ) {
    return _dbtopow(
      arg0,
    );
  }

  late final _dbtopow_ptr = _lookup<ffi.NativeFunction<_c_dbtopow>>('dbtopow');
  late final _dart_dbtopow _dbtopow = _dbtopow_ptr.asFunction<_dart_dbtopow>();

  double q8_sqrt(
    double arg0,
  ) {
    return _q8_sqrt(
      arg0,
    );
  }

  late final _q8_sqrt_ptr = _lookup<ffi.NativeFunction<_c_q8_sqrt>>('q8_sqrt');
  late final _dart_q8_sqrt _q8_sqrt = _q8_sqrt_ptr.asFunction<_dart_q8_sqrt>();

  double q8_rsqrt(
    double arg0,
  ) {
    return _q8_rsqrt(
      arg0,
    );
  }

  late final _q8_rsqrt_ptr =
      _lookup<ffi.NativeFunction<_c_q8_rsqrt>>('q8_rsqrt');
  late final _dart_q8_rsqrt _q8_rsqrt =
      _q8_rsqrt_ptr.asFunction<_dart_q8_rsqrt>();

  double qsqrt(
    double arg0,
  ) {
    return _qsqrt(
      arg0,
    );
  }

  late final _qsqrt_ptr = _lookup<ffi.NativeFunction<_c_qsqrt>>('qsqrt');
  late final _dart_qsqrt _qsqrt = _qsqrt_ptr.asFunction<_dart_qsqrt>();

  double qrsqrt(
    double arg0,
  ) {
    return _qrsqrt(
      arg0,
    );
  }

  late final _qrsqrt_ptr = _lookup<ffi.NativeFunction<_c_qrsqrt>>('qrsqrt');
  late final _dart_qrsqrt _qrsqrt = _qrsqrt_ptr.asFunction<_dart_qrsqrt>();

  late final ffi.Pointer<ffi.Pointer<_class>> _garray_class =
      _lookup<ffi.Pointer<_class>>('garray_class');

  ffi.Pointer<_class> get garray_class => _garray_class.value;

  set garray_class(ffi.Pointer<_class> value) => _garray_class.value = value;

  int garray_getfloatarray(
    ffi.Pointer<_garray> x,
    ffi.Pointer<ffi.Int32> size,
    ffi.Pointer<ffi.Pointer<ffi.Float>> vec,
  ) {
    return _garray_getfloatarray(
      x,
      size,
      vec,
    );
  }

  late final _garray_getfloatarray_ptr =
      _lookup<ffi.NativeFunction<_c_garray_getfloatarray>>(
          'garray_getfloatarray');
  late final _dart_garray_getfloatarray _garray_getfloatarray =
      _garray_getfloatarray_ptr.asFunction<_dart_garray_getfloatarray>();

  void garray_redraw(
    ffi.Pointer<_garray> x,
  ) {
    return _garray_redraw(
      x,
    );
  }

  late final _garray_redraw_ptr =
      _lookup<ffi.NativeFunction<_c_garray_redraw>>('garray_redraw');
  late final _dart_garray_redraw _garray_redraw =
      _garray_redraw_ptr.asFunction<_dart_garray_redraw>();

  int garray_npoints(
    ffi.Pointer<_garray> x,
  ) {
    return _garray_npoints(
      x,
    );
  }

  late final _garray_npoints_ptr =
      _lookup<ffi.NativeFunction<_c_garray_npoints>>('garray_npoints');
  late final _dart_garray_npoints _garray_npoints =
      _garray_npoints_ptr.asFunction<_dart_garray_npoints>();

  ffi.Pointer<ffi.Int8> garray_vec(
    ffi.Pointer<_garray> x,
  ) {
    return _garray_vec(
      x,
    );
  }

  late final _garray_vec_ptr =
      _lookup<ffi.NativeFunction<_c_garray_vec>>('garray_vec');
  late final _dart_garray_vec _garray_vec =
      _garray_vec_ptr.asFunction<_dart_garray_vec>();

  void garray_resize(
    ffi.Pointer<_garray> x,
    double f,
  ) {
    return _garray_resize(
      x,
      f,
    );
  }

  late final _garray_resize_ptr =
      _lookup<ffi.NativeFunction<_c_garray_resize>>('garray_resize');
  late final _dart_garray_resize _garray_resize =
      _garray_resize_ptr.asFunction<_dart_garray_resize>();

  void garray_resize_long(
    ffi.Pointer<_garray> x,
    int n,
  ) {
    return _garray_resize_long(
      x,
      n,
    );
  }

  late final _garray_resize_long_ptr =
      _lookup<ffi.NativeFunction<_c_garray_resize_long>>('garray_resize_long');
  late final _dart_garray_resize_long _garray_resize_long =
      _garray_resize_long_ptr.asFunction<_dart_garray_resize_long>();

  void garray_usedindsp(
    ffi.Pointer<_garray> x,
  ) {
    return _garray_usedindsp(
      x,
    );
  }

  late final _garray_usedindsp_ptr =
      _lookup<ffi.NativeFunction<_c_garray_usedindsp>>('garray_usedindsp');
  late final _dart_garray_usedindsp _garray_usedindsp =
      _garray_usedindsp_ptr.asFunction<_dart_garray_usedindsp>();

  void garray_setsaveit(
    ffi.Pointer<_garray> x,
    int saveit,
  ) {
    return _garray_setsaveit(
      x,
      saveit,
    );
  }

  late final _garray_setsaveit_ptr =
      _lookup<ffi.NativeFunction<_c_garray_setsaveit>>('garray_setsaveit');
  late final _dart_garray_setsaveit _garray_setsaveit =
      _garray_setsaveit_ptr.asFunction<_dart_garray_setsaveit>();

  ffi.Pointer<_glist> garray_getglist(
    ffi.Pointer<_garray> x,
  ) {
    return _garray_getglist(
      x,
    );
  }

  late final _garray_getglist_ptr =
      _lookup<ffi.NativeFunction<_c_garray_getglist>>('garray_getglist');
  late final _dart_garray_getglist _garray_getglist =
      _garray_getglist_ptr.asFunction<_dart_garray_getglist>();

  ffi.Pointer<_array> garray_getarray(
    ffi.Pointer<_garray> x,
  ) {
    return _garray_getarray(
      x,
    );
  }

  late final _garray_getarray_ptr =
      _lookup<ffi.NativeFunction<_c_garray_getarray>>('garray_getarray');
  late final _dart_garray_getarray _garray_getarray =
      _garray_getarray_ptr.asFunction<_dart_garray_getarray>();

  late final ffi.Pointer<ffi.Pointer<_class>> _scalar_class =
      _lookup<ffi.Pointer<_class>>('scalar_class');

  ffi.Pointer<_class> get scalar_class => _scalar_class.value;

  set scalar_class(ffi.Pointer<_class> value) => _scalar_class.value = value;

  ffi.Pointer<ffi.Float> value_get(
    ffi.Pointer<t_symbol> s,
  ) {
    return _value_get(
      s,
    );
  }

  late final _value_get_ptr =
      _lookup<ffi.NativeFunction<_c_value_get>>('value_get');
  late final _dart_value_get _value_get =
      _value_get_ptr.asFunction<_dart_value_get>();

  void value_release(
    ffi.Pointer<t_symbol> s,
  ) {
    return _value_release(
      s,
    );
  }

  late final _value_release_ptr =
      _lookup<ffi.NativeFunction<_c_value_release>>('value_release');
  late final _dart_value_release _value_release =
      _value_release_ptr.asFunction<_dart_value_release>();

  int value_getfloat(
    ffi.Pointer<t_symbol> s,
    ffi.Pointer<ffi.Float> f,
  ) {
    return _value_getfloat(
      s,
      f,
    );
  }

  late final _value_getfloat_ptr =
      _lookup<ffi.NativeFunction<_c_value_getfloat>>('value_getfloat');
  late final _dart_value_getfloat _value_getfloat =
      _value_getfloat_ptr.asFunction<_dart_value_getfloat>();

  int value_setfloat(
    ffi.Pointer<t_symbol> s,
    double f,
  ) {
    return _value_setfloat(
      s,
      f,
    );
  }

  late final _value_setfloat_ptr =
      _lookup<ffi.NativeFunction<_c_value_setfloat>>('value_setfloat');
  late final _dart_value_setfloat _value_setfloat =
      _value_setfloat_ptr.asFunction<_dart_value_setfloat>();

  void sys_vgui(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _sys_vgui(
      fmt,
    );
  }

  late final _sys_vgui_ptr =
      _lookup<ffi.NativeFunction<_c_sys_vgui>>('sys_vgui');
  late final _dart_sys_vgui _sys_vgui =
      _sys_vgui_ptr.asFunction<_dart_sys_vgui>();

  void sys_gui(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _sys_gui(
      s,
    );
  }

  late final _sys_gui_ptr = _lookup<ffi.NativeFunction<_c_sys_gui>>('sys_gui');
  late final _dart_sys_gui _sys_gui = _sys_gui_ptr.asFunction<_dart_sys_gui>();

  void sys_pretendguibytes(
    int n,
  ) {
    return _sys_pretendguibytes(
      n,
    );
  }

  late final _sys_pretendguibytes_ptr =
      _lookup<ffi.NativeFunction<_c_sys_pretendguibytes>>(
          'sys_pretendguibytes');
  late final _dart_sys_pretendguibytes _sys_pretendguibytes =
      _sys_pretendguibytes_ptr.asFunction<_dart_sys_pretendguibytes>();

  void sys_queuegui(
    ffi.Pointer<ffi.Void> client,
    ffi.Pointer<_glist> glist,
    ffi.Pointer<ffi.NativeFunction<t_guicallbackfn>> f,
  ) {
    return _sys_queuegui(
      client,
      glist,
      f,
    );
  }

  late final _sys_queuegui_ptr =
      _lookup<ffi.NativeFunction<_c_sys_queuegui>>('sys_queuegui');
  late final _dart_sys_queuegui _sys_queuegui =
      _sys_queuegui_ptr.asFunction<_dart_sys_queuegui>();

  void sys_unqueuegui(
    ffi.Pointer<ffi.Void> client,
  ) {
    return _sys_unqueuegui(
      client,
    );
  }

  late final _sys_unqueuegui_ptr =
      _lookup<ffi.NativeFunction<_c_sys_unqueuegui>>('sys_unqueuegui');
  late final _dart_sys_unqueuegui _sys_unqueuegui =
      _sys_unqueuegui_ptr.asFunction<_dart_sys_unqueuegui>();

  void gfxstub_new(
    ffi.Pointer<ffi.Pointer<_class>> owner,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Int8> cmd,
  ) {
    return _gfxstub_new(
      owner,
      key,
      cmd,
    );
  }

  late final _gfxstub_new_ptr =
      _lookup<ffi.NativeFunction<_c_gfxstub_new>>('gfxstub_new');
  late final _dart_gfxstub_new _gfxstub_new =
      _gfxstub_new_ptr.asFunction<_dart_gfxstub_new>();

  void gfxstub_deleteforkey(
    ffi.Pointer<ffi.Void> key,
  ) {
    return _gfxstub_deleteforkey(
      key,
    );
  }

  late final _gfxstub_deleteforkey_ptr =
      _lookup<ffi.NativeFunction<_c_gfxstub_deleteforkey>>(
          'gfxstub_deleteforkey');
  late final _dart_gfxstub_deleteforkey _gfxstub_deleteforkey =
      _gfxstub_deleteforkey_ptr.asFunction<_dart_gfxstub_deleteforkey>();

  late final ffi.Pointer<ffi.Pointer<_class>> _glob_pdobject =
      _lookup<ffi.Pointer<_class>>('glob_pdobject');

  ffi.Pointer<_class> get glob_pdobject => _glob_pdobject.value;

  set glob_pdobject(ffi.Pointer<_class> value) => _glob_pdobject.value = value;

  void c_extern(
    ffi.Pointer<ffi.Pointer<_class>> cls,
    ffi.Pointer<ffi.NativeFunction<t_newmethod>> newroutine,
    ffi.Pointer<ffi.NativeFunction<t_method>> freeroutine,
    ffi.Pointer<t_symbol> name,
    int size,
    int tiny,
    int arg1,
  ) {
    return _c_extern(
      cls,
      newroutine,
      freeroutine,
      name,
      size,
      tiny,
      arg1,
    );
  }

  late final _c_extern_ptr =
      _lookup<ffi.NativeFunction<_c_c_extern>>('c_extern');
  late final _dart_c_extern _c_extern =
      _c_extern_ptr.asFunction<_dart_c_extern>();

  void c_addmess(
    ffi.Pointer<ffi.NativeFunction<t_method>> fn,
    ffi.Pointer<t_symbol> sel,
    int arg1,
  ) {
    return _c_addmess(
      fn,
      sel,
      arg1,
    );
  }

  late final _c_addmess_ptr =
      _lookup<ffi.NativeFunction<_c_c_addmess>>('c_addmess');
  late final _dart_c_addmess _c_addmess =
      _c_addmess_ptr.asFunction<_dart_c_addmess>();

  void sys_getversion(
    ffi.Pointer<ffi.Int32> major,
    ffi.Pointer<ffi.Int32> minor,
    ffi.Pointer<ffi.Int32> bugfix,
  ) {
    return _sys_getversion(
      major,
      minor,
      bugfix,
    );
  }

  late final _sys_getversion_ptr =
      _lookup<ffi.NativeFunction<_c_sys_getversion>>('sys_getversion');
  late final _dart_sys_getversion _sys_getversion =
      _sys_getversion_ptr.asFunction<_dart_sys_getversion>();

  late final ffi.Pointer<_pdinstance> _pd_maininstance =
      _lookup<_pdinstance>('pd_maininstance');

  _pdinstance get pd_maininstance => _pd_maininstance.ref;

  late final ffi.Pointer<t_symbol> _s_pointer = _lookup<t_symbol>('s_pointer');

  t_symbol get s_pointer => _s_pointer.ref;

  late final ffi.Pointer<t_symbol> _s_float = _lookup<t_symbol>('s_float');

  t_symbol get s_float => _s_float.ref;

  late final ffi.Pointer<t_symbol> _s_symbol = _lookup<t_symbol>('s_symbol');

  t_symbol get s_symbol => _s_symbol.ref;

  late final ffi.Pointer<t_symbol> _s_bang = _lookup<t_symbol>('s_bang');

  t_symbol get s_bang => _s_bang.ref;

  late final ffi.Pointer<t_symbol> _s_list = _lookup<t_symbol>('s_list');

  t_symbol get s_list => _s_list.ref;

  late final ffi.Pointer<t_symbol> _s_anything =
      _lookup<t_symbol>('s_anything');

  t_symbol get s_anything => _s_anything.ref;

  late final ffi.Pointer<t_symbol> _s_signal = _lookup<t_symbol>('s_signal');

  t_symbol get s_signal => _s_signal.ref;

  late final ffi.Pointer<t_symbol> _s__N = _lookup<t_symbol>('s__N');

  t_symbol get s__N => _s__N.ref;

  late final ffi.Pointer<t_symbol> _s__X = _lookup<t_symbol>('s__X');

  t_symbol get s__X => _s__X.ref;

  late final ffi.Pointer<t_symbol> _s_x = _lookup<t_symbol>('s_x');

  t_symbol get s_x => _s_x.ref;

  late final ffi.Pointer<t_symbol> _s_y = _lookup<t_symbol>('s_y');

  t_symbol get s_y => _s_y.ref;

  late final ffi.Pointer<t_symbol> _s_ = _lookup<t_symbol>('s_');

  t_symbol get s_ => _s_.ref;

  ffi.Pointer<_glist> pd_getcanvaslist() {
    return _pd_getcanvaslist();
  }

  late final _pd_getcanvaslist_ptr =
      _lookup<ffi.NativeFunction<_c_pd_getcanvaslist>>('pd_getcanvaslist');
  late final _dart_pd_getcanvaslist _pd_getcanvaslist =
      _pd_getcanvaslist_ptr.asFunction<_dart_pd_getcanvaslist>();

  int pd_getdspstate() {
    return _pd_getdspstate();
  }

  late final _pd_getdspstate_ptr =
      _lookup<ffi.NativeFunction<_c_pd_getdspstate>>('pd_getdspstate');
  late final _dart_pd_getdspstate _pd_getdspstate =
      _pd_getdspstate_ptr.asFunction<_dart_pd_getdspstate>();

  ffi.Pointer<_binbuf> text_getbufbyname(
    ffi.Pointer<t_symbol> s,
  ) {
    return _text_getbufbyname(
      s,
    );
  }

  late final _text_getbufbyname_ptr =
      _lookup<ffi.NativeFunction<_c_text_getbufbyname>>('text_getbufbyname');
  late final _dart_text_getbufbyname _text_getbufbyname =
      _text_getbufbyname_ptr.asFunction<_dart_text_getbufbyname>();

  void text_notifybyname(
    ffi.Pointer<t_symbol> s,
  ) {
    return _text_notifybyname(
      s,
    );
  }

  late final _text_notifybyname_ptr =
      _lookup<ffi.NativeFunction<_c_text_notifybyname>>('text_notifybyname');
  late final _dart_text_notifybyname _text_notifybyname =
      _text_notifybyname_ptr.asFunction<_dart_text_notifybyname>();

  /// initialize libpd; it is safe to call this more than once
  /// returns 0 on success or -1 if libpd was already initialized
  /// note: sets SIGFPE handler to keep bad pd patches from crashing due to divide
  /// by 0, set any custom handling after calling this function
  int libpd_init() {
    return _libpd_init();
  }

  late final _libpd_init_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_init>>('libpd_init');
  late final _dart_libpd_init _libpd_init =
      _libpd_init_ptr.asFunction<_dart_libpd_init>();

  /// clear the libpd search path for abstractions and externals
  /// note: this is called by libpd_init()
  void libpd_clear_search_path() {
    return _libpd_clear_search_path();
  }

  late final _libpd_clear_search_path_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_clear_search_path>>(
          'libpd_clear_search_path');
  late final _dart_libpd_clear_search_path _libpd_clear_search_path =
      _libpd_clear_search_path_ptr.asFunction<_dart_libpd_clear_search_path>();

  /// add a path to the libpd search paths
  /// relative paths are relative to the current working directory
  /// unlike desktop pd, *no* search paths are set by default (ie. extra)
  void libpd_add_to_search_path(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _libpd_add_to_search_path(
      path,
    );
  }

  late final _libpd_add_to_search_path_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_add_to_search_path>>(
          'libpd_add_to_search_path');
  late final _dart_libpd_add_to_search_path _libpd_add_to_search_path =
      _libpd_add_to_search_path_ptr
          .asFunction<_dart_libpd_add_to_search_path>();

  /// open a patch by filename and parent dir path
  /// returns an opaque patch handle pointer or NULL on failure
  ffi.Pointer<ffi.Void> libpd_openfile(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> dir,
  ) {
    return _libpd_openfile(
      name,
      dir,
    );
  }

  late final _libpd_openfile_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_openfile>>('libpd_openfile');
  late final _dart_libpd_openfile _libpd_openfile =
      _libpd_openfile_ptr.asFunction<_dart_libpd_openfile>();

  /// close a patch by patch handle pointer
  void libpd_closefile(
    ffi.Pointer<ffi.Void> p,
  ) {
    return _libpd_closefile(
      p,
    );
  }

  late final _libpd_closefile_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_closefile>>('libpd_closefile');
  late final _dart_libpd_closefile _libpd_closefile =
      _libpd_closefile_ptr.asFunction<_dart_libpd_closefile>();

  /// get the $0 id of the patch handle pointer
  /// returns $0 value or 0 if the patch is non-existent
  int libpd_getdollarzero(
    ffi.Pointer<ffi.Void> p,
  ) {
    return _libpd_getdollarzero(
      p,
    );
  }

  late final _libpd_getdollarzero_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_getdollarzero>>(
          'libpd_getdollarzero');
  late final _dart_libpd_getdollarzero _libpd_getdollarzero =
      _libpd_getdollarzero_ptr.asFunction<_dart_libpd_getdollarzero>();

  /// return pd's fixed block size: the number of sample frames per 1 pd tick
  int libpd_blocksize() {
    return _libpd_blocksize();
  }

  late final _libpd_blocksize_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_blocksize>>('libpd_blocksize');
  late final _dart_libpd_blocksize _libpd_blocksize =
      _libpd_blocksize_ptr.asFunction<_dart_libpd_blocksize>();

  /// initialize audio rendering
  /// returns 0 on success
  int libpd_init_audio(
    int inChannels,
    int outChannels,
    int sampleRate,
  ) {
    return _libpd_init_audio(
      inChannels,
      outChannels,
      sampleRate,
    );
  }

  late final _libpd_init_audio_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_init_audio>>('libpd_init_audio');
  late final _dart_libpd_init_audio _libpd_init_audio =
      _libpd_init_audio_ptr.asFunction<_dart_libpd_init_audio>();

  /// process interleaved float samples from inBuffer -> libpd -> outBuffer
  /// buffer sizes are based on # of ticks and channels where:
  /// size = ticks * libpd_blocksize() * (in/out)channels
  /// returns 0 on success
  int libpd_process_float(
    int ticks,
    ffi.Pointer<ffi.Float> inBuffer,
    ffi.Pointer<ffi.Float> outBuffer,
  ) {
    return _libpd_process_float(
      ticks,
      inBuffer,
      outBuffer,
    );
  }

  late final _libpd_process_float_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_process_float>>(
          'libpd_process_float');
  late final _dart_libpd_process_float _libpd_process_float =
      _libpd_process_float_ptr.asFunction<_dart_libpd_process_float>();

  /// process interleaved short samples from inBuffer -> libpd -> outBuffer
  /// buffer sizes are based on # of ticks and channels where:
  /// size = ticks * libpd_blocksize() * (in/out)channels
  /// float samples are converted to short by multiplying by 32767 and casting,
  /// so any values received from pd patches beyond -1 to 1 will result in garbage
  /// note: for efficiency, does *not* clip input
  /// returns 0 on success
  int libpd_process_short(
    int ticks,
    ffi.Pointer<ffi.Int16> inBuffer,
    ffi.Pointer<ffi.Int16> outBuffer,
  ) {
    return _libpd_process_short(
      ticks,
      inBuffer,
      outBuffer,
    );
  }

  late final _libpd_process_short_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_process_short>>(
          'libpd_process_short');
  late final _dart_libpd_process_short _libpd_process_short =
      _libpd_process_short_ptr.asFunction<_dart_libpd_process_short>();

  /// process interleaved double samples from inBuffer -> libpd -> outBuffer
  /// buffer sizes are based on # of ticks and channels where:
  /// size = ticks * libpd_blocksize() * (in/out)channels
  /// returns 0 on success
  int libpd_process_double(
    int ticks,
    ffi.Pointer<ffi.Double> inBuffer,
    ffi.Pointer<ffi.Double> outBuffer,
  ) {
    return _libpd_process_double(
      ticks,
      inBuffer,
      outBuffer,
    );
  }

  late final _libpd_process_double_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_process_double>>(
          'libpd_process_double');
  late final _dart_libpd_process_double _libpd_process_double =
      _libpd_process_double_ptr.asFunction<_dart_libpd_process_double>();

  /// process non-interleaved float samples from inBuffer -> libpd -> outBuffer
  /// copies buffer contents to/from libpd without striping
  /// buffer sizes are based on a single tick and # of channels where:
  /// size = libpd_blocksize() * (in/out)channels
  /// returns 0 on success
  int libpd_process_raw(
    ffi.Pointer<ffi.Float> inBuffer,
    ffi.Pointer<ffi.Float> outBuffer,
  ) {
    return _libpd_process_raw(
      inBuffer,
      outBuffer,
    );
  }

  late final _libpd_process_raw_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_process_raw>>('libpd_process_raw');
  late final _dart_libpd_process_raw _libpd_process_raw =
      _libpd_process_raw_ptr.asFunction<_dart_libpd_process_raw>();

  /// process non-interleaved short samples from inBuffer -> libpd -> outBuffer
  /// copies buffer contents to/from libpd without striping
  /// buffer sizes are based on a single tick and # of channels where:
  /// size = libpd_blocksize() * (in/out)channels
  /// float samples are converted to short by multiplying by 32767 and casting,
  /// so any values received from pd patches beyond -1 to 1 will result in garbage
  /// note: for efficiency, does *not* clip input
  /// returns 0 on success
  int libpd_process_raw_short(
    ffi.Pointer<ffi.Int16> inBuffer,
    ffi.Pointer<ffi.Int16> outBuffer,
  ) {
    return _libpd_process_raw_short(
      inBuffer,
      outBuffer,
    );
  }

  late final _libpd_process_raw_short_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_process_raw_short>>(
          'libpd_process_raw_short');
  late final _dart_libpd_process_raw_short _libpd_process_raw_short =
      _libpd_process_raw_short_ptr.asFunction<_dart_libpd_process_raw_short>();

  /// process non-interleaved double samples from inBuffer -> libpd -> outBuffer
  /// copies buffer contents to/from libpd without striping
  /// buffer sizes are based on a single tick and # of channels where:
  /// size = libpd_blocksize() * (in/out)channels
  /// returns 0 on success
  int libpd_process_raw_double(
    ffi.Pointer<ffi.Double> inBuffer,
    ffi.Pointer<ffi.Double> outBuffer,
  ) {
    return _libpd_process_raw_double(
      inBuffer,
      outBuffer,
    );
  }

  late final _libpd_process_raw_double_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_process_raw_double>>(
          'libpd_process_raw_double');
  late final _dart_libpd_process_raw_double _libpd_process_raw_double =
      _libpd_process_raw_double_ptr
          .asFunction<_dart_libpd_process_raw_double>();

  /// get the size of an array by name
  /// returns size or negative error code if non-existent
  int libpd_arraysize(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _libpd_arraysize(
      name,
    );
  }

  late final _libpd_arraysize_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_arraysize>>('libpd_arraysize');
  late final _dart_libpd_arraysize _libpd_arraysize =
      _libpd_arraysize_ptr.asFunction<_dart_libpd_arraysize>();

  /// (re)size an array by name; sizes <= 0 are clipped to 1
  /// returns 0 on success or negative error code if non-existent
  int libpd_resize_array(
    ffi.Pointer<ffi.Int8> name,
    int size,
  ) {
    return _libpd_resize_array(
      name,
      size,
    );
  }

  late final _libpd_resize_array_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_resize_array>>('libpd_resize_array');
  late final _dart_libpd_resize_array _libpd_resize_array =
      _libpd_resize_array_ptr.asFunction<_dart_libpd_resize_array>();

  /// read n values from named src array and write into dest starting at an offset
  /// note: performs no bounds checking on dest
  /// returns 0 on success or a negative error code if the array is non-existent
  /// or offset + n exceeds range of array
  int libpd_read_array(
    ffi.Pointer<ffi.Float> dest,
    ffi.Pointer<ffi.Int8> name,
    int offset,
    int n,
  ) {
    return _libpd_read_array(
      dest,
      name,
      offset,
      n,
    );
  }

  late final _libpd_read_array_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_read_array>>('libpd_read_array');
  late final _dart_libpd_read_array _libpd_read_array =
      _libpd_read_array_ptr.asFunction<_dart_libpd_read_array>();

  /// read n values from src and write into named dest array starting at an offset
  /// note: performs no bounds checking on src
  /// returns 0 on success or a negative error code if the array is non-existent
  /// or offset + n exceeds range of array
  int libpd_write_array(
    ffi.Pointer<ffi.Int8> name,
    int offset,
    ffi.Pointer<ffi.Float> src,
    int n,
  ) {
    return _libpd_write_array(
      name,
      offset,
      src,
      n,
    );
  }

  late final _libpd_write_array_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_write_array>>('libpd_write_array');
  late final _dart_libpd_write_array _libpd_write_array =
      _libpd_write_array_ptr.asFunction<_dart_libpd_write_array>();

  /// send a bang to a destination receiver
  /// ex: libpd_bang("foo") will send a bang to [s foo] on the next tick
  /// returns 0 on success or -1 if receiver name is non-existent
  int libpd_bang(
    ffi.Pointer<ffi.Int8> recv,
  ) {
    return _libpd_bang(
      recv,
    );
  }

  late final _libpd_bang_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_bang>>('libpd_bang');
  late final _dart_libpd_bang _libpd_bang =
      _libpd_bang_ptr.asFunction<_dart_libpd_bang>();

  /// send a float to a destination receiver
  /// ex: libpd_float("foo", 1) will send a 1.0 to [s foo] on the next tick
  /// returns 0 on success or -1 if receiver name is non-existent
  int libpd_float(
    ffi.Pointer<ffi.Int8> recv,
    double x,
  ) {
    return _libpd_float(
      recv,
      x,
    );
  }

  late final _libpd_float_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_float>>('libpd_float');
  late final _dart_libpd_float _libpd_float =
      _libpd_float_ptr.asFunction<_dart_libpd_float>();

  /// send a symbol to a destination receiver
  /// ex: libpd_symbol("foo", "bar") will send "bar" to [s foo] on the next tick
  /// returns 0 on success or -1 if receiver name is non-existent
  int libpd_symbol(
    ffi.Pointer<ffi.Int8> recv,
    ffi.Pointer<ffi.Int8> symbol,
  ) {
    return _libpd_symbol(
      recv,
      symbol,
    );
  }

  late final _libpd_symbol_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_symbol>>('libpd_symbol');
  late final _dart_libpd_symbol _libpd_symbol =
      _libpd_symbol_ptr.asFunction<_dart_libpd_symbol>();

  /// start composition of a new list or typed message of up to max element length
  /// messages can be of a smaller length as max length is only an upper bound
  /// note: no cleanup is required for unfinished messages
  /// returns 0 on success or nonzero if the length is too large
  int libpd_start_message(
    int maxlen,
  ) {
    return _libpd_start_message(
      maxlen,
    );
  }

  late final _libpd_start_message_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_start_message>>(
          'libpd_start_message');
  late final _dart_libpd_start_message _libpd_start_message =
      _libpd_start_message_ptr.asFunction<_dart_libpd_start_message>();

  /// add a float to the current message in progress
  void libpd_add_float(
    double x,
  ) {
    return _libpd_add_float(
      x,
    );
  }

  late final _libpd_add_float_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_add_float>>('libpd_add_float');
  late final _dart_libpd_add_float _libpd_add_float =
      _libpd_add_float_ptr.asFunction<_dart_libpd_add_float>();

  /// add a symbol to the current message in progress
  void libpd_add_symbol(
    ffi.Pointer<ffi.Int8> symbol,
  ) {
    return _libpd_add_symbol(
      symbol,
    );
  }

  late final _libpd_add_symbol_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_add_symbol>>('libpd_add_symbol');
  late final _dart_libpd_add_symbol _libpd_add_symbol =
      _libpd_add_symbol_ptr.asFunction<_dart_libpd_add_symbol>();

  /// finish current message and send as a list to a destination receiver
  /// returns 0 on success or -1 if receiver name is non-existent
  /// ex: send [list 1 2 bar( to [s foo] on the next tick with:
  /// libpd_start_message(3);
  /// libpd_add_float(1);
  /// libpd_add_float(2);
  /// libpd_add_symbol("bar");
  /// libpd_finish_list("foo");
  int libpd_finish_list(
    ffi.Pointer<ffi.Int8> recv,
  ) {
    return _libpd_finish_list(
      recv,
    );
  }

  late final _libpd_finish_list_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_finish_list>>('libpd_finish_list');
  late final _dart_libpd_finish_list _libpd_finish_list =
      _libpd_finish_list_ptr.asFunction<_dart_libpd_finish_list>();

  /// finish current message and send as a typed message to a destination receiver
  /// note: typed message handling currently only supports up to 4 elements
  /// internally, additional elements may be ignored
  /// returns 0 on success or -1 if receiver name is non-existent
  /// ex: send [; pd dsp 1( on the next tick with:
  /// libpd_start_message(1);
  /// libpd_add_float(1);
  /// libpd_finish_message("pd", "dsp");
  int libpd_finish_message(
    ffi.Pointer<ffi.Int8> recv,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _libpd_finish_message(
      recv,
      msg,
    );
  }

  late final _libpd_finish_message_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_finish_message>>(
          'libpd_finish_message');
  late final _dart_libpd_finish_message _libpd_finish_message =
      _libpd_finish_message_ptr.asFunction<_dart_libpd_finish_message>();

  /// write a float value to the given atom
  void libpd_set_float(
    ffi.Pointer<t_atom> a,
    double x,
  ) {
    return _libpd_set_float(
      a,
      x,
    );
  }

  late final _libpd_set_float_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_float>>('libpd_set_float');
  late final _dart_libpd_set_float _libpd_set_float =
      _libpd_set_float_ptr.asFunction<_dart_libpd_set_float>();

  /// write a symbol value to the given atom
  void libpd_set_symbol(
    ffi.Pointer<t_atom> a,
    ffi.Pointer<ffi.Int8> symbol,
  ) {
    return _libpd_set_symbol(
      a,
      symbol,
    );
  }

  late final _libpd_set_symbol_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_symbol>>('libpd_set_symbol');
  late final _dart_libpd_set_symbol _libpd_set_symbol =
      _libpd_set_symbol_ptr.asFunction<_dart_libpd_set_symbol>();

  /// send an atom array of a given length as a list to a destination receiver
  /// returns 0 on success or -1 if receiver name is non-existent
  /// ex: send [list 1 2 bar( to [r foo] on the next tick with:
  /// t_atom v[3];
  /// libpd_set_float(v, 1);
  /// libpd_set_float(v + 1, 2);
  /// libpd_set_symbol(v + 2, "bar");
  /// libpd_list("foo", 3, v);
  int libpd_list(
    ffi.Pointer<ffi.Int8> recv,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _libpd_list(
      recv,
      argc,
      argv,
    );
  }

  late final _libpd_list_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_list>>('libpd_list');
  late final _dart_libpd_list _libpd_list =
      _libpd_list_ptr.asFunction<_dart_libpd_list>();

  /// send a atom array of a given length as a typed message to a destination
  /// receiver, returns 0 on success or -1 if receiver name is non-existent
  /// ex: send [; pd dsp 1( on the next tick with:
  /// t_atom v[1];
  /// libpd_set_float(v, 1);
  /// libpd_message("pd", "dsp", 1, v);
  int libpd_message(
    ffi.Pointer<ffi.Int8> recv,
    ffi.Pointer<ffi.Int8> msg,
    int argc,
    ffi.Pointer<t_atom> argv,
  ) {
    return _libpd_message(
      recv,
      msg,
      argc,
      argv,
    );
  }

  late final _libpd_message_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_message>>('libpd_message');
  late final _dart_libpd_message _libpd_message =
      _libpd_message_ptr.asFunction<_dart_libpd_message>();

  /// subscribe to messages sent to a source receiver
  /// ex: libpd_bind("foo") adds a "virtual" [r foo] which forwards messages to
  /// the libpd message hooks
  /// returns an opaque receiver pointer or NULL on failure
  ffi.Pointer<ffi.Void> libpd_bind(
    ffi.Pointer<ffi.Int8> recv,
  ) {
    return _libpd_bind(
      recv,
    );
  }

  late final _libpd_bind_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_bind>>('libpd_bind');
  late final _dart_libpd_bind _libpd_bind =
      _libpd_bind_ptr.asFunction<_dart_libpd_bind>();

  /// unsubscribe and free a source receiver object created by libpd_bind()
  void libpd_unbind(
    ffi.Pointer<ffi.Void> p,
  ) {
    return _libpd_unbind(
      p,
    );
  }

  late final _libpd_unbind_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_unbind>>('libpd_unbind');
  late final _dart_libpd_unbind _libpd_unbind =
      _libpd_unbind_ptr.asFunction<_dart_libpd_unbind>();

  /// check if a source receiver object exists with a given name
  /// returns 1 if the receiver exists, otherwise 0
  int libpd_exists(
    ffi.Pointer<ffi.Int8> recv,
  ) {
    return _libpd_exists(
      recv,
    );
  }

  late final _libpd_exists_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_exists>>('libpd_exists');
  late final _dart_libpd_exists _libpd_exists =
      _libpd_exists_ptr.asFunction<_dart_libpd_exists>();

  /// set the print receiver hook, prints to stdout by default
  /// note: do not call this while DSP is running
  void libpd_set_printhook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_printhook>> hook,
  ) {
    return _libpd_set_printhook(
      hook,
    );
  }

  late final _libpd_set_printhook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_printhook>>(
          'libpd_set_printhook');
  late final _dart_libpd_set_printhook _libpd_set_printhook =
      _libpd_set_printhook_ptr.asFunction<_dart_libpd_set_printhook>();

  /// set the bang receiver hook, NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_banghook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_banghook>> hook,
  ) {
    return _libpd_set_banghook(
      hook,
    );
  }

  late final _libpd_set_banghook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_banghook>>('libpd_set_banghook');
  late final _dart_libpd_set_banghook _libpd_set_banghook =
      _libpd_set_banghook_ptr.asFunction<_dart_libpd_set_banghook>();

  /// set the float receiver hook, NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_floathook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_floathook>> hook,
  ) {
    return _libpd_set_floathook(
      hook,
    );
  }

  late final _libpd_set_floathook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_floathook>>(
          'libpd_set_floathook');
  late final _dart_libpd_set_floathook _libpd_set_floathook =
      _libpd_set_floathook_ptr.asFunction<_dart_libpd_set_floathook>();

  /// set the symbol receiver hook, NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_symbolhook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_symbolhook>> hook,
  ) {
    return _libpd_set_symbolhook(
      hook,
    );
  }

  late final _libpd_set_symbolhook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_symbolhook>>(
          'libpd_set_symbolhook');
  late final _dart_libpd_set_symbolhook _libpd_set_symbolhook =
      _libpd_set_symbolhook_ptr.asFunction<_dart_libpd_set_symbolhook>();

  /// set the list receiver hook, NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_listhook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_listhook>> hook,
  ) {
    return _libpd_set_listhook(
      hook,
    );
  }

  late final _libpd_set_listhook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_listhook>>('libpd_set_listhook');
  late final _dart_libpd_set_listhook _libpd_set_listhook =
      _libpd_set_listhook_ptr.asFunction<_dart_libpd_set_listhook>();

  /// set the message receiver hook, NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_messagehook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_messagehook>> hook,
  ) {
    return _libpd_set_messagehook(
      hook,
    );
  }

  late final _libpd_set_messagehook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_messagehook>>(
          'libpd_set_messagehook');
  late final _dart_libpd_set_messagehook _libpd_set_messagehook =
      _libpd_set_messagehook_ptr.asFunction<_dart_libpd_set_messagehook>();

  /// check if an atom is a float type: 0 or 1
  /// note: no NULL check is performed
  int libpd_is_float(
    ffi.Pointer<t_atom> a,
  ) {
    return _libpd_is_float(
      a,
    );
  }

  late final _libpd_is_float_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_is_float>>('libpd_is_float');
  late final _dart_libpd_is_float _libpd_is_float =
      _libpd_is_float_ptr.asFunction<_dart_libpd_is_float>();

  /// check if an atom is a symbol type: 0 or 1
  /// note: no NULL check is performed
  int libpd_is_symbol(
    ffi.Pointer<t_atom> a,
  ) {
    return _libpd_is_symbol(
      a,
    );
  }

  late final _libpd_is_symbol_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_is_symbol>>('libpd_is_symbol');
  late final _dart_libpd_is_symbol _libpd_is_symbol =
      _libpd_is_symbol_ptr.asFunction<_dart_libpd_is_symbol>();

  /// get the float value of an atom
  /// note: no NULL or type checks are performed
  double libpd_get_float(
    ffi.Pointer<t_atom> a,
  ) {
    return _libpd_get_float(
      a,
    );
  }

  late final _libpd_get_float_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_get_float>>('libpd_get_float');
  late final _dart_libpd_get_float _libpd_get_float =
      _libpd_get_float_ptr.asFunction<_dart_libpd_get_float>();

  /// note: no NULL or type checks are performed
  /// get symbol value of an atom
  ffi.Pointer<ffi.Int8> libpd_get_symbol(
    ffi.Pointer<t_atom> a,
  ) {
    return _libpd_get_symbol(
      a,
    );
  }

  late final _libpd_get_symbol_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_get_symbol>>('libpd_get_symbol');
  late final _dart_libpd_get_symbol _libpd_get_symbol =
      _libpd_get_symbol_ptr.asFunction<_dart_libpd_get_symbol>();

  /// increment to the next atom in an atom vector
  /// returns next atom or NULL, assuming the atom vector is NULL-terminated
  ffi.Pointer<t_atom> libpd_next_atom(
    ffi.Pointer<t_atom> a,
  ) {
    return _libpd_next_atom(
      a,
    );
  }

  late final _libpd_next_atom_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_next_atom>>('libpd_next_atom');
  late final _dart_libpd_next_atom _libpd_next_atom =
      _libpd_next_atom_ptr.asFunction<_dart_libpd_next_atom>();

  /// send a MIDI note on message to [notein] objects
  /// channel is 0-indexed, pitch is 0-127, and velocity is 0-127
  /// channels encode MIDI ports via: libpd_channel = pd_channel + 16 * pd_port
  /// note: there is no note off message, send a note on with velocity = 0 instead
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_noteon(
    int channel,
    int pitch,
    int velocity,
  ) {
    return _libpd_noteon(
      channel,
      pitch,
      velocity,
    );
  }

  late final _libpd_noteon_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_noteon>>('libpd_noteon');
  late final _dart_libpd_noteon _libpd_noteon =
      _libpd_noteon_ptr.asFunction<_dart_libpd_noteon>();

  /// send a MIDI control change message to [ctlin] objects
  /// channel is 0-indexed, controller is 0-127, and value is 0-127
  /// channels encode MIDI ports via: libpd_channel = pd_channel + 16 * pd_port
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_controlchange(
    int channel,
    int controller,
    int value,
  ) {
    return _libpd_controlchange(
      channel,
      controller,
      value,
    );
  }

  late final _libpd_controlchange_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_controlchange>>(
          'libpd_controlchange');
  late final _dart_libpd_controlchange _libpd_controlchange =
      _libpd_controlchange_ptr.asFunction<_dart_libpd_controlchange>();

  /// send a MIDI program change message to [pgmin] objects
  /// channel is 0-indexed and value is 0-127
  /// channels encode MIDI ports via: libpd_channel = pd_channel + 16 * pd_port
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_programchange(
    int channel,
    int value,
  ) {
    return _libpd_programchange(
      channel,
      value,
    );
  }

  late final _libpd_programchange_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_programchange>>(
          'libpd_programchange');
  late final _dart_libpd_programchange _libpd_programchange =
      _libpd_programchange_ptr.asFunction<_dart_libpd_programchange>();

  /// send a MIDI pitch bend message to [bendin] objects
  /// channel is 0-indexed and value is -8192-8192
  /// channels encode MIDI ports via: libpd_channel = pd_channel + 16 * pd_port
  /// note: [bendin] outputs 0-16383 while [bendout] accepts -8192-8192
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_pitchbend(
    int channel,
    int value,
  ) {
    return _libpd_pitchbend(
      channel,
      value,
    );
  }

  late final _libpd_pitchbend_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_pitchbend>>('libpd_pitchbend');
  late final _dart_libpd_pitchbend _libpd_pitchbend =
      _libpd_pitchbend_ptr.asFunction<_dart_libpd_pitchbend>();

  /// send a MIDI after touch message to [touchin] objects
  /// channel is 0-indexed and value is 0-127
  /// channels encode MIDI ports via: libpd_channel = pd_channel + 16 * pd_port
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_aftertouch(
    int channel,
    int value,
  ) {
    return _libpd_aftertouch(
      channel,
      value,
    );
  }

  late final _libpd_aftertouch_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_aftertouch>>('libpd_aftertouch');
  late final _dart_libpd_aftertouch _libpd_aftertouch =
      _libpd_aftertouch_ptr.asFunction<_dart_libpd_aftertouch>();

  /// send a MIDI poly after touch message to [polytouchin] objects
  /// channel is 0-indexed, pitch is 0-127, and value is 0-127
  /// channels encode MIDI ports via: libpd_channel = pd_channel + 16 * pd_port
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_polyaftertouch(
    int channel,
    int pitch,
    int value,
  ) {
    return _libpd_polyaftertouch(
      channel,
      pitch,
      value,
    );
  }

  late final _libpd_polyaftertouch_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_polyaftertouch>>(
          'libpd_polyaftertouch');
  late final _dart_libpd_polyaftertouch _libpd_polyaftertouch =
      _libpd_polyaftertouch_ptr.asFunction<_dart_libpd_polyaftertouch>();

  /// send a raw MIDI byte to [midiin] objects
  /// port is 0-indexed and byte is 0-256
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_midibyte(
    int port,
    int byte,
  ) {
    return _libpd_midibyte(
      port,
      byte,
    );
  }

  late final _libpd_midibyte_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_midibyte>>('libpd_midibyte');
  late final _dart_libpd_midibyte _libpd_midibyte =
      _libpd_midibyte_ptr.asFunction<_dart_libpd_midibyte>();

  /// send a raw MIDI byte to [sysexin] objects
  /// port is 0-indexed and byte is 0-256
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_sysex(
    int port,
    int byte,
  ) {
    return _libpd_sysex(
      port,
      byte,
    );
  }

  late final _libpd_sysex_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_sysex>>('libpd_sysex');
  late final _dart_libpd_sysex _libpd_sysex =
      _libpd_sysex_ptr.asFunction<_dart_libpd_sysex>();

  /// send a raw MIDI byte to [realtimein] objects
  /// port is 0-indexed and byte is 0-256
  /// returns 0 on success or -1 if an argument is out of range
  int libpd_sysrealtime(
    int port,
    int byte,
  ) {
    return _libpd_sysrealtime(
      port,
      byte,
    );
  }

  late final _libpd_sysrealtime_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_sysrealtime>>('libpd_sysrealtime');
  late final _dart_libpd_sysrealtime _libpd_sysrealtime =
      _libpd_sysrealtime_ptr.asFunction<_dart_libpd_sysrealtime>();

  /// set the MIDI note on hook to receive from [noteout] objects, NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_noteonhook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_noteonhook>> hook,
  ) {
    return _libpd_set_noteonhook(
      hook,
    );
  }

  late final _libpd_set_noteonhook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_noteonhook>>(
          'libpd_set_noteonhook');
  late final _dart_libpd_set_noteonhook _libpd_set_noteonhook =
      _libpd_set_noteonhook_ptr.asFunction<_dart_libpd_set_noteonhook>();

  /// set the MIDI control change hook to receive from [ctlout] objects,
  /// NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_controlchangehook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_controlchangehook>> hook,
  ) {
    return _libpd_set_controlchangehook(
      hook,
    );
  }

  late final _libpd_set_controlchangehook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_controlchangehook>>(
          'libpd_set_controlchangehook');
  late final _dart_libpd_set_controlchangehook _libpd_set_controlchangehook =
      _libpd_set_controlchangehook_ptr
          .asFunction<_dart_libpd_set_controlchangehook>();

  /// set the MIDI program change hook to receive from [pgmout] objects,
  /// NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_programchangehook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_programchangehook>> hook,
  ) {
    return _libpd_set_programchangehook(
      hook,
    );
  }

  late final _libpd_set_programchangehook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_programchangehook>>(
          'libpd_set_programchangehook');
  late final _dart_libpd_set_programchangehook _libpd_set_programchangehook =
      _libpd_set_programchangehook_ptr
          .asFunction<_dart_libpd_set_programchangehook>();

  /// set the MIDI pitch bend hook to receive from [bendout] objects,
  /// NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_pitchbendhook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_pitchbendhook>> hook,
  ) {
    return _libpd_set_pitchbendhook(
      hook,
    );
  }

  late final _libpd_set_pitchbendhook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_pitchbendhook>>(
          'libpd_set_pitchbendhook');
  late final _dart_libpd_set_pitchbendhook _libpd_set_pitchbendhook =
      _libpd_set_pitchbendhook_ptr.asFunction<_dart_libpd_set_pitchbendhook>();

  /// set the MIDI after touch hook to receive from [touchout] objects,
  /// NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_aftertouchhook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_aftertouchhook>> hook,
  ) {
    return _libpd_set_aftertouchhook(
      hook,
    );
  }

  late final _libpd_set_aftertouchhook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_aftertouchhook>>(
          'libpd_set_aftertouchhook');
  late final _dart_libpd_set_aftertouchhook _libpd_set_aftertouchhook =
      _libpd_set_aftertouchhook_ptr
          .asFunction<_dart_libpd_set_aftertouchhook>();

  /// set the MIDI poly after touch hook to receive from [polytouchout] objects,
  /// NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_polyaftertouchhook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_polyaftertouchhook>> hook,
  ) {
    return _libpd_set_polyaftertouchhook(
      hook,
    );
  }

  late final _libpd_set_polyaftertouchhook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_polyaftertouchhook>>(
          'libpd_set_polyaftertouchhook');
  late final _dart_libpd_set_polyaftertouchhook _libpd_set_polyaftertouchhook =
      _libpd_set_polyaftertouchhook_ptr
          .asFunction<_dart_libpd_set_polyaftertouchhook>();

  /// set the raw MIDI byte hook to receive from [midiout] objects,
  /// NULL by default
  /// note: do not call this while DSP is running
  void libpd_set_midibytehook(
    ffi.Pointer<ffi.NativeFunction<t_libpd_midibytehook>> hook,
  ) {
    return _libpd_set_midibytehook(
      hook,
    );
  }

  late final _libpd_set_midibytehook_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_midibytehook>>(
          'libpd_set_midibytehook');
  late final _dart_libpd_set_midibytehook _libpd_set_midibytehook =
      _libpd_set_midibytehook_ptr.asFunction<_dart_libpd_set_midibytehook>();

  /// open the current patches within a pd vanilla GUI
  /// requires the path to pd's main folder that contains bin/, tcl/, etc
  /// for a macOS .app bundle: /path/to/Pd-#.#-#.app/Contents/Resources
  /// returns 0 on success
  int libpd_start_gui(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _libpd_start_gui(
      path,
    );
  }

  late final _libpd_start_gui_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_start_gui>>('libpd_start_gui');
  late final _dart_libpd_start_gui _libpd_start_gui =
      _libpd_start_gui_ptr.asFunction<_dart_libpd_start_gui>();

  /// stop the pd vanilla GUI
  void libpd_stop_gui() {
    return _libpd_stop_gui();
  }

  late final _libpd_stop_gui_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_stop_gui>>('libpd_stop_gui');
  late final _dart_libpd_stop_gui _libpd_stop_gui =
      _libpd_stop_gui_ptr.asFunction<_dart_libpd_stop_gui>();

  /// manually update and handle any GUI messages
  /// this is called automatically when using a libpd_process function,
  /// note: this also facilitates network message processing, etc so it can be
  /// useful to call repeatedly when idle for more throughput
  /// returns 1 if the poll found something, in which case it might be desirable
  /// to poll again, up to some reasonable limit
  int libpd_poll_gui() {
    return _libpd_poll_gui();
  }

  late final _libpd_poll_gui_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_poll_gui>>('libpd_poll_gui');
  late final _dart_libpd_poll_gui _libpd_poll_gui =
      _libpd_poll_gui_ptr.asFunction<_dart_libpd_poll_gui>();

  /// create a new pd instance
  /// returns new instance or NULL when libpd is not compiled with PDINSTANCE
  ffi.Pointer<_pdinstance> libpd_new_instance() {
    return _libpd_new_instance();
  }

  late final _libpd_new_instance_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_new_instance>>('libpd_new_instance');
  late final _dart_libpd_new_instance _libpd_new_instance =
      _libpd_new_instance_ptr.asFunction<_dart_libpd_new_instance>();

  /// set the current pd instance
  /// subsequent libpd calls will affect this instance only
  /// does nothing when libpd is not compiled with PDINSTANCE
  void libpd_set_instance(
    ffi.Pointer<_pdinstance> p,
  ) {
    return _libpd_set_instance(
      p,
    );
  }

  late final _libpd_set_instance_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_instance>>('libpd_set_instance');
  late final _dart_libpd_set_instance _libpd_set_instance =
      _libpd_set_instance_ptr.asFunction<_dart_libpd_set_instance>();

  /// free a pd instance
  /// does nothing when libpd is not compiled with PDINSTANCE
  void libpd_free_instance(
    ffi.Pointer<_pdinstance> p,
  ) {
    return _libpd_free_instance(
      p,
    );
  }

  late final _libpd_free_instance_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_free_instance>>(
          'libpd_free_instance');
  late final _dart_libpd_free_instance _libpd_free_instance =
      _libpd_free_instance_ptr.asFunction<_dart_libpd_free_instance>();

  /// get the current pd instance
  ffi.Pointer<_pdinstance> libpd_this_instance() {
    return _libpd_this_instance();
  }

  late final _libpd_this_instance_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_this_instance>>(
          'libpd_this_instance');
  late final _dart_libpd_this_instance _libpd_this_instance =
      _libpd_this_instance_ptr.asFunction<_dart_libpd_this_instance>();

  /// get a pd instance by index
  /// returns NULL if index is out of bounds or "this" instance when libpd is not
  /// compiled with PDINSTANCE
  ffi.Pointer<_pdinstance> libpd_get_instance(
    int index,
  ) {
    return _libpd_get_instance(
      index,
    );
  }

  late final _libpd_get_instance_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_get_instance>>('libpd_get_instance');
  late final _dart_libpd_get_instance _libpd_get_instance =
      _libpd_get_instance_ptr.asFunction<_dart_libpd_get_instance>();

  /// get the number of pd instances
  /// returns number or 1 when libpd is not compiled with PDINSTANCE
  int libpd_num_instances() {
    return _libpd_num_instances();
  }

  late final _libpd_num_instances_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_num_instances>>(
          'libpd_num_instances');
  late final _dart_libpd_num_instances _libpd_num_instances =
      _libpd_num_instances_ptr.asFunction<_dart_libpd_num_instances>();

  /// set verbose print state: 0 or 1
  void libpd_set_verbose(
    int verbose,
  ) {
    return _libpd_set_verbose(
      verbose,
    );
  }

  late final _libpd_set_verbose_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_set_verbose>>('libpd_set_verbose');
  late final _dart_libpd_set_verbose _libpd_set_verbose =
      _libpd_set_verbose_ptr.asFunction<_dart_libpd_set_verbose>();

  /// get the verbose print state: 0 or 1
  int libpd_get_verbose() {
    return _libpd_get_verbose();
  }

  late final _libpd_get_verbose_ptr =
      _lookup<ffi.NativeFunction<_c_libpd_get_verbose>>('libpd_get_verbose');
  late final _dart_libpd_get_verbose _libpd_get_verbose =
      _libpd_get_verbose_ptr.asFunction<_dart_libpd_get_verbose>();
}

class __fsid_t extends ffi.Opaque {}

class __mbstate_t extends ffi.Opaque {}

class __fpos_t extends ffi.Opaque {}

class __fpos64_t extends ffi.Opaque {}

class _IO_marker extends ffi.Opaque {}

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

class _IO_FILE extends ffi.Opaque {}

class _class extends ffi.Opaque {}

class t_symbol extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> s_name;

  external ffi.Pointer<ffi.Pointer<_class>> s_thing;

  external ffi.Pointer<t_symbol> s_next;
}

class _array extends ffi.Opaque {}

class t_gstub extends ffi.Opaque {}

class t_gpointer extends ffi.Opaque {}

abstract class t_atomtype {
  static const int A_NULL = 0;
  static const int A_FLOAT = 1;
  static const int A_SYMBOL = 2;
  static const int A_POINTER = 3;
  static const int A_SEMI = 4;
  static const int A_COMMA = 5;
  static const int A_DEFFLOAT = 6;
  static const int A_DEFSYM = 7;
  static const int A_DOLLAR = 8;
  static const int A_DOLLSYM = 9;
  static const int A_GIMME = 10;
  static const int A_CANT = 11;
}

class t_atom extends ffi.Opaque {}

class _outlet extends ffi.Opaque {}

class _inlet extends ffi.Opaque {}

class _binbuf extends ffi.Opaque {}

class _clock extends ffi.Opaque {}

class _outconnect extends ffi.Opaque {}

class _glist extends ffi.Opaque {}

class _template extends ffi.Opaque {}

class t_gobj extends ffi.Struct {
  external ffi.Pointer<_class> g_pd;

  external ffi.Pointer<t_gobj> g_next;
}

class t_scalar extends ffi.Opaque {}

class t_text extends ffi.Opaque {}

class _widgetbehavior extends ffi.Opaque {}

class _parentwidgetbehavior extends ffi.Opaque {}

class t_signal extends ffi.Struct {
  @ffi.Int32()
  external int s_n;

  external ffi.Pointer<ffi.Float> s_vec;

  @ffi.Float()
  external double s_sr;

  @ffi.Int32()
  external int s_refcount;

  @ffi.Int32()
  external int s_isborrowed;

  external ffi.Pointer<t_signal> s_borrowedfrom;

  external ffi.Pointer<t_signal> s_nextfree;

  external ffi.Pointer<t_signal> s_nextused;

  @ffi.Int32()
  external int s_vecsize;
}

class t_resample extends ffi.Struct {
  @ffi.Int32()
  external int method;

  @ffi.Int32()
  external int downsample;

  @ffi.Int32()
  external int upsample;

  external ffi.Pointer<ffi.Float> s_vec;

  @ffi.Int32()
  external int s_n;

  external ffi.Pointer<ffi.Float> coeffs;

  @ffi.Int32()
  external int coefsize;

  external ffi.Pointer<ffi.Float> buffer;

  @ffi.Int32()
  external int bufsize;
}

class _garray extends ffi.Opaque {}

class _instancemidi extends ffi.Opaque {}

class _instanceinter extends ffi.Opaque {}

class _instancecanvas extends ffi.Opaque {}

class _instanceugen extends ffi.Opaque {}

class _instancestuff extends ffi.Opaque {}

class _pdinstance extends ffi.Struct {
  @ffi.Double()
  external double pd_systime;

  external ffi.Pointer<_clock> pd_clock_setlist;

  external ffi.Pointer<_glist> pd_canvaslist;

  external ffi.Pointer<_template> pd_templatelist;

  @ffi.Int32()
  external int pd_instanceno;

  external ffi.Pointer<ffi.Pointer<t_symbol>> pd_symhash;

  external ffi.Pointer<_instancemidi> pd_midi;

  external ffi.Pointer<_instanceinter> pd_inter;

  external ffi.Pointer<_instanceugen> pd_ugen;

  external ffi.Pointer<_instancecanvas> pd_gui;

  external ffi.Pointer<_instancestuff> pd_stuff;

  external ffi.Pointer<ffi.Pointer<_class>> pd_newest;

  @ffi.Int32()
  external int pd_islocked;
}

const int PD_MAJOR_VERSION = 0;

const int PD_MINOR_VERSION = 51;

const int PD_BUGFIX_VERSION = 4;

const String PD_TEST_VERSION = '';

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 33;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int MAXPDSTRING = 1000;

const int MAXPDARG = 5;

const int PD_FLOATSIZE = 32;

const int GP_NONE = 0;

const int GP_GLIST = 1;

const int GP_ARRAY = 2;

const int A_DEFSYMBOL = 7;

const int T_TEXT = 0;

const int T_OBJECT = 1;

const int T_MESSAGE = 2;

const int T_ATOM = 3;

const int CLASS_DEFAULT = 0;

const int CLASS_PD = 1;

const int CLASS_GOBJ = 2;

const int CLASS_PATCHABLE = 3;

const int CLASS_NOINLET = 8;

const int CLASS_TYPEMASK = 3;

const int MAXLOGSIG = 32;

const int MAXSIGSIZE = -2147483648;

const int LOGCOSTABSIZE = 9;

const int COSTABSIZE = 512;

const int PDTHREADS = 1;

typedef _c_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _c_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_renameat = ffi.Int32 Function(
  ffi.Int32 __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  ffi.Int32 __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_renameat = int Function(
  int __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  int __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_tmpfile = ffi.Pointer<_IO_FILE> Function();

typedef _dart_tmpfile = ffi.Pointer<_IO_FILE> Function();

typedef _c_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _c_fclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fflush = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fflush_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fflush_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_freopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_freopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fdopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fdopen = ffi.Pointer<_IO_FILE> Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_fmemopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fmemopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Void> __s,
  int __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_open_memstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Int32> __sizeloc,
);

typedef _dart_open_memstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Int32> __sizeloc,
);

typedef _c_setbuf = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_setvbuf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __modes,
  ffi.Int32 __n,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __modes,
  int __n,
);

typedef _c_setbuffer = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __size,
);

typedef _dart_setbuffer = void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __size,
);

typedef _c_setlinebuf = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_setlinebuf = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fprintf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_printf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_printf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vfprintf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vprintf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vsprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vsprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_snprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vdprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  ffi.Int32 __arg,
);

typedef _dart_vdprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  int __arg,
);

typedef _c_dprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _dart_dprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _c_fscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fscanf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_scanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_scanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vfscanf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vscanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_fgetc = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getc = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef _c_getc_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getc_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getchar_unlocked = ffi.Int32 Function();

typedef _dart_getchar_unlocked = int Function();

typedef _c_fgetc_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetc_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putchar = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar = int Function(
  int __c,
);

typedef _c_fputc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputc_unlocked = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putc_unlocked = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putchar_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar_unlocked = int Function(
  int __c,
);

typedef _c_getw = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getw = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putw = ffi.Int32 Function(
  ffi.Int32 __w,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putw = int Function(
  int __w,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c___getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart___getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  int __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  int __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getline = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getline = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_ungetc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ungetc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fread = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fwrite = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __s,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __s,
);

typedef _c_fread_unlocked = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fread_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fwrite_unlocked = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fwrite_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fseek = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  int __off,
  int __whence,
);

typedef _c_ftell = ffi.Int64 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_rewind = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fseeko = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseeko = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  int __off,
  int __whence,
);

typedef _c_ftello = ffi.Int64 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftello = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fgetpos = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _c_fsetpos = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _c_clearerr = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_feof = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_feof = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ferror = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_clearerr_unlocked = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_clearerr_unlocked = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_feof_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_feof_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ferror_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ferror_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_fileno = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fileno_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fileno_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_popen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_popen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_pclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_pclose = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_flockfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_flockfile = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ftrylockfile = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftrylockfile = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_funlockfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_funlockfile = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c___uflow = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> arg0,
);

typedef _dart___uflow = int Function(
  ffi.Pointer<_IO_FILE> arg0,
);

typedef _c___overflow = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> arg0,
  ffi.Int32 arg1,
);

typedef _dart___overflow = int Function(
  ffi.Pointer<_IO_FILE> arg0,
  int arg1,
);

typedef _c_pd_typedmess = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_pd_typedmess = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_pd_forwardmess = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_pd_forwardmess = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_gensym = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_gensym = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef t_gotfn = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_getfn = ffi.Pointer<ffi.NativeFunction<t_gotfn>> Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _dart_getfn = ffi.Pointer<ffi.NativeFunction<t_gotfn>> Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _c_zgetfn = ffi.Pointer<ffi.NativeFunction<t_gotfn>> Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _dart_zgetfn = ffi.Pointer<ffi.NativeFunction<t_gotfn>> Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _c_nullfn = ffi.Void Function();

typedef _dart_nullfn = void Function();

typedef _c_pd_vmess = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_pd_vmess = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_obj_list = ffi.Void Function(
  ffi.Pointer<t_text> x,
  ffi.Pointer<t_symbol> s,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_obj_list = void Function(
  ffi.Pointer<t_text> x,
  ffi.Pointer<t_symbol> s,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_pd_newest = ffi.Pointer<ffi.Pointer<_class>> Function();

typedef _dart_pd_newest = ffi.Pointer<ffi.Pointer<_class>> Function();

typedef _c_getbytes = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 nbytes,
);

typedef _dart_getbytes = ffi.Pointer<ffi.Void> Function(
  int nbytes,
);

typedef _c_getzbytes = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 nbytes,
);

typedef _dart_getzbytes = ffi.Pointer<ffi.Void> Function(
  int nbytes,
);

typedef _c_copybytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> src,
  ffi.Int32 nbytes,
);

typedef _dart_copybytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> src,
  int nbytes,
);

typedef _c_freebytes = ffi.Void Function(
  ffi.Pointer<ffi.Void> x,
  ffi.Int32 nbytes,
);

typedef _dart_freebytes = void Function(
  ffi.Pointer<ffi.Void> x,
  int nbytes,
);

typedef _c_resizebytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> x,
  ffi.Int32 oldsize,
  ffi.Int32 newsize,
);

typedef _dart_resizebytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> x,
  int oldsize,
  int newsize,
);

typedef _c_atom_getfloat = ffi.Float Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_atom_getfloat = double Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_atom_getint = ffi.Int64 Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_atom_getint = int Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_atom_getsymbol = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_atom_getsymbol = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_atom_gensym = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_atom_gensym = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_atom_getfloatarg = ffi.Float Function(
  ffi.Int32 which,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_atom_getfloatarg = double Function(
  int which,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_atom_getintarg = ffi.Int64 Function(
  ffi.Int32 which,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_atom_getintarg = int Function(
  int which,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_atom_getsymbolarg = ffi.Pointer<t_symbol> Function(
  ffi.Int32 which,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_atom_getsymbolarg = ffi.Pointer<t_symbol> Function(
  int which,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_atom_string = ffi.Void Function(
  ffi.Pointer<t_atom> a,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 bufsize,
);

typedef _dart_atom_string = void Function(
  ffi.Pointer<t_atom> a,
  ffi.Pointer<ffi.Int8> buf,
  int bufsize,
);

typedef _c_binbuf_new = ffi.Pointer<_binbuf> Function();

typedef _dart_binbuf_new = ffi.Pointer<_binbuf> Function();

typedef _c_binbuf_free = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
);

typedef _dart_binbuf_free = void Function(
  ffi.Pointer<_binbuf> x,
);

typedef _c_binbuf_duplicate = ffi.Pointer<_binbuf> Function(
  ffi.Pointer<_binbuf> y,
);

typedef _dart_binbuf_duplicate = ffi.Pointer<_binbuf> Function(
  ffi.Pointer<_binbuf> y,
);

typedef _c_binbuf_text = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 size,
);

typedef _dart_binbuf_text = void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Int8> text,
  int size,
);

typedef _c_binbuf_gettext = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> bufp,
  ffi.Pointer<ffi.Int32> lengthp,
);

typedef _dart_binbuf_gettext = void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> bufp,
  ffi.Pointer<ffi.Int32> lengthp,
);

typedef _c_binbuf_clear = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
);

typedef _dart_binbuf_clear = void Function(
  ffi.Pointer<_binbuf> x,
);

typedef _c_binbuf_add = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_binbuf_add = void Function(
  ffi.Pointer<_binbuf> x,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_binbuf_addv = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_binbuf_addv = void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_binbuf_addbinbuf = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<_binbuf> y,
);

typedef _dart_binbuf_addbinbuf = void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<_binbuf> y,
);

typedef _c_binbuf_addsemi = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
);

typedef _dart_binbuf_addsemi = void Function(
  ffi.Pointer<_binbuf> x,
);

typedef _c_binbuf_restore = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_binbuf_restore = void Function(
  ffi.Pointer<_binbuf> x,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_binbuf_print = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
);

typedef _dart_binbuf_print = void Function(
  ffi.Pointer<_binbuf> x,
);

typedef _c_binbuf_getnatom = ffi.Int32 Function(
  ffi.Pointer<_binbuf> x,
);

typedef _dart_binbuf_getnatom = int Function(
  ffi.Pointer<_binbuf> x,
);

typedef _c_binbuf_getvec = ffi.Pointer<t_atom> Function(
  ffi.Pointer<_binbuf> x,
);

typedef _dart_binbuf_getvec = ffi.Pointer<t_atom> Function(
  ffi.Pointer<_binbuf> x,
);

typedef _c_binbuf_resize = ffi.Int32 Function(
  ffi.Pointer<_binbuf> x,
  ffi.Int32 newsize,
);

typedef _dart_binbuf_resize = int Function(
  ffi.Pointer<_binbuf> x,
  int newsize,
);

typedef _c_binbuf_eval = ffi.Void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Pointer<_class>> target,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_binbuf_eval = void Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Pointer<_class>> target,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_binbuf_read = ffi.Int32 Function(
  ffi.Pointer<_binbuf> b,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> dirname,
  ffi.Int32 crflag,
);

typedef _dart_binbuf_read = int Function(
  ffi.Pointer<_binbuf> b,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> dirname,
  int crflag,
);

typedef _c_binbuf_read_via_canvas = ffi.Int32 Function(
  ffi.Pointer<_binbuf> b,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<_glist> canvas,
  ffi.Int32 crflag,
);

typedef _dart_binbuf_read_via_canvas = int Function(
  ffi.Pointer<_binbuf> b,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<_glist> canvas,
  int crflag,
);

typedef _c_binbuf_read_via_path = ffi.Int32 Function(
  ffi.Pointer<_binbuf> b,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> dirname,
  ffi.Int32 crflag,
);

typedef _dart_binbuf_read_via_path = int Function(
  ffi.Pointer<_binbuf> b,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> dirname,
  int crflag,
);

typedef _c_binbuf_write = ffi.Int32 Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> dir,
  ffi.Int32 crflag,
);

typedef _dart_binbuf_write = int Function(
  ffi.Pointer<_binbuf> x,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> dir,
  int crflag,
);

typedef _c_binbuf_evalfile = ffi.Void Function(
  ffi.Pointer<t_symbol> name,
  ffi.Pointer<t_symbol> dir,
);

typedef _dart_binbuf_evalfile = void Function(
  ffi.Pointer<t_symbol> name,
  ffi.Pointer<t_symbol> dir,
);

typedef _c_binbuf_realizedollsym = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<t_symbol> s,
  ffi.Int32 ac,
  ffi.Pointer<t_atom> av,
  ffi.Int32 tonew,
);

typedef _dart_binbuf_realizedollsym = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<t_symbol> s,
  int ac,
  ffi.Pointer<t_atom> av,
  int tonew,
);

typedef t_method = ffi.Void Function();

typedef _c_clock_new = ffi.Pointer<_clock> Function(
  ffi.Pointer<ffi.Void> owner,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _dart_clock_new = ffi.Pointer<_clock> Function(
  ffi.Pointer<ffi.Void> owner,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _c_clock_set = ffi.Void Function(
  ffi.Pointer<_clock> x,
  ffi.Double systime,
);

typedef _dart_clock_set = void Function(
  ffi.Pointer<_clock> x,
  double systime,
);

typedef _c_clock_delay = ffi.Void Function(
  ffi.Pointer<_clock> x,
  ffi.Double delaytime,
);

typedef _dart_clock_delay = void Function(
  ffi.Pointer<_clock> x,
  double delaytime,
);

typedef _c_clock_unset = ffi.Void Function(
  ffi.Pointer<_clock> x,
);

typedef _dart_clock_unset = void Function(
  ffi.Pointer<_clock> x,
);

typedef _c_clock_setunit = ffi.Void Function(
  ffi.Pointer<_clock> x,
  ffi.Double timeunit,
  ffi.Int32 sampflag,
);

typedef _dart_clock_setunit = void Function(
  ffi.Pointer<_clock> x,
  double timeunit,
  int sampflag,
);

typedef _c_clock_getlogicaltime = ffi.Double Function();

typedef _dart_clock_getlogicaltime = double Function();

typedef _c_clock_getsystime = ffi.Double Function();

typedef _dart_clock_getsystime = double Function();

typedef _c_clock_gettimesince = ffi.Double Function(
  ffi.Double prevsystime,
);

typedef _dart_clock_gettimesince = double Function(
  double prevsystime,
);

typedef _c_clock_gettimesincewithunits = ffi.Double Function(
  ffi.Double prevsystime,
  ffi.Double units,
  ffi.Int32 sampflag,
);

typedef _dart_clock_gettimesincewithunits = double Function(
  double prevsystime,
  double units,
  int sampflag,
);

typedef _c_clock_getsystimeafter = ffi.Double Function(
  ffi.Double delaytime,
);

typedef _dart_clock_getsystimeafter = double Function(
  double delaytime,
);

typedef _c_clock_free = ffi.Void Function(
  ffi.Pointer<_clock> x,
);

typedef _dart_clock_free = void Function(
  ffi.Pointer<_clock> x,
);

typedef _c_pd_new = ffi.Pointer<ffi.Pointer<_class>> Function(
  ffi.Pointer<_class> cls,
);

typedef _dart_pd_new = ffi.Pointer<ffi.Pointer<_class>> Function(
  ffi.Pointer<_class> cls,
);

typedef _c_pd_free = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _dart_pd_free = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _c_pd_bind = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _dart_pd_bind = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _c_pd_unbind = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _dart_pd_unbind = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _c_pd_findbyclass = ffi.Pointer<ffi.Pointer<_class>> Function(
  ffi.Pointer<t_symbol> s,
  ffi.Pointer<_class> c,
);

typedef _dart_pd_findbyclass = ffi.Pointer<ffi.Pointer<_class>> Function(
  ffi.Pointer<t_symbol> s,
  ffi.Pointer<_class> c,
);

typedef _c_pd_pushsym = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _dart_pd_pushsym = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _c_pd_popsym = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _dart_pd_popsym = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _c_pd_bang = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _dart_pd_bang = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _c_pd_pointer = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_gpointer> gp,
);

typedef _dart_pd_pointer = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_gpointer> gp,
);

typedef _c_pd_float = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Float f,
);

typedef _dart_pd_float = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  double f,
);

typedef _c_pd_symbol = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _dart_pd_symbol = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
);

typedef _c_pd_list = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_pd_list = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_pd_anything = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_pd_anything = void Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
  ffi.Pointer<t_symbol> s,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_gpointer_init = ffi.Void Function(
  ffi.Pointer<t_gpointer> gp,
);

typedef _dart_gpointer_init = void Function(
  ffi.Pointer<t_gpointer> gp,
);

typedef _c_gpointer_copy = ffi.Void Function(
  ffi.Pointer<t_gpointer> gpfrom,
  ffi.Pointer<t_gpointer> gpto,
);

typedef _dart_gpointer_copy = void Function(
  ffi.Pointer<t_gpointer> gpfrom,
  ffi.Pointer<t_gpointer> gpto,
);

typedef _c_gpointer_unset = ffi.Void Function(
  ffi.Pointer<t_gpointer> gp,
);

typedef _dart_gpointer_unset = void Function(
  ffi.Pointer<t_gpointer> gp,
);

typedef _c_gpointer_check = ffi.Int32 Function(
  ffi.Pointer<t_gpointer> gp,
  ffi.Int32 headok,
);

typedef _dart_gpointer_check = int Function(
  ffi.Pointer<t_gpointer> gp,
  int headok,
);

typedef _c_inlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<ffi.Pointer<_class>> dest,
  ffi.Pointer<t_symbol> s1,
  ffi.Pointer<t_symbol> s2,
);

typedef _dart_inlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<ffi.Pointer<_class>> dest,
  ffi.Pointer<t_symbol> s1,
  ffi.Pointer<t_symbol> s2,
);

typedef _c_pointerinlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<t_gpointer> gp,
);

typedef _dart_pointerinlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<t_gpointer> gp,
);

typedef _c_floatinlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<ffi.Float> fp,
);

typedef _dart_floatinlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<ffi.Float> fp,
);

typedef _c_symbolinlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<ffi.Pointer<t_symbol>> sp,
);

typedef _dart_symbolinlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<ffi.Pointer<t_symbol>> sp,
);

typedef _c_signalinlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Float f,
);

typedef _dart_signalinlet_new = ffi.Pointer<_inlet> Function(
  ffi.Pointer<t_text> owner,
  double f,
);

typedef _c_inlet_free = ffi.Void Function(
  ffi.Pointer<_inlet> x,
);

typedef _dart_inlet_free = void Function(
  ffi.Pointer<_inlet> x,
);

typedef _c_outlet_new = ffi.Pointer<_outlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<t_symbol> s,
);

typedef _dart_outlet_new = ffi.Pointer<_outlet> Function(
  ffi.Pointer<t_text> owner,
  ffi.Pointer<t_symbol> s,
);

typedef _c_outlet_bang = ffi.Void Function(
  ffi.Pointer<_outlet> x,
);

typedef _dart_outlet_bang = void Function(
  ffi.Pointer<_outlet> x,
);

typedef _c_outlet_pointer = ffi.Void Function(
  ffi.Pointer<_outlet> x,
  ffi.Pointer<t_gpointer> gp,
);

typedef _dart_outlet_pointer = void Function(
  ffi.Pointer<_outlet> x,
  ffi.Pointer<t_gpointer> gp,
);

typedef _c_outlet_float = ffi.Void Function(
  ffi.Pointer<_outlet> x,
  ffi.Float f,
);

typedef _dart_outlet_float = void Function(
  ffi.Pointer<_outlet> x,
  double f,
);

typedef _c_outlet_symbol = ffi.Void Function(
  ffi.Pointer<_outlet> x,
  ffi.Pointer<t_symbol> s,
);

typedef _dart_outlet_symbol = void Function(
  ffi.Pointer<_outlet> x,
  ffi.Pointer<t_symbol> s,
);

typedef _c_outlet_list = ffi.Void Function(
  ffi.Pointer<_outlet> x,
  ffi.Pointer<t_symbol> s,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_outlet_list = void Function(
  ffi.Pointer<_outlet> x,
  ffi.Pointer<t_symbol> s,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_outlet_anything = ffi.Void Function(
  ffi.Pointer<_outlet> x,
  ffi.Pointer<t_symbol> s,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_outlet_anything = void Function(
  ffi.Pointer<_outlet> x,
  ffi.Pointer<t_symbol> s,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_outlet_getsymbol = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<_outlet> x,
);

typedef _dart_outlet_getsymbol = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<_outlet> x,
);

typedef _c_outlet_free = ffi.Void Function(
  ffi.Pointer<_outlet> x,
);

typedef _dart_outlet_free = void Function(
  ffi.Pointer<_outlet> x,
);

typedef _c_pd_checkobject = ffi.Pointer<t_text> Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _dart_pd_checkobject = ffi.Pointer<t_text> Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _c_glob_setfilename = ffi.Void Function(
  ffi.Pointer<ffi.Void> dummy,
  ffi.Pointer<t_symbol> name,
  ffi.Pointer<t_symbol> dir,
);

typedef _dart_glob_setfilename = void Function(
  ffi.Pointer<ffi.Void> dummy,
  ffi.Pointer<t_symbol> name,
  ffi.Pointer<t_symbol> dir,
);

typedef _c_canvas_setargs = ffi.Void Function(
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_canvas_setargs = void Function(
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_canvas_getargs = ffi.Void Function(
  ffi.Pointer<ffi.Int32> argcp,
  ffi.Pointer<ffi.Pointer<t_atom>> argvp,
);

typedef _dart_canvas_getargs = void Function(
  ffi.Pointer<ffi.Int32> argcp,
  ffi.Pointer<ffi.Pointer<t_atom>> argvp,
);

typedef _c_canvas_getcurrentdir = ffi.Pointer<t_symbol> Function();

typedef _dart_canvas_getcurrentdir = ffi.Pointer<t_symbol> Function();

typedef _c_canvas_getcurrent = ffi.Pointer<_glist> Function();

typedef _dart_canvas_getcurrent = ffi.Pointer<_glist> Function();

typedef _c_canvas_makefilename = ffi.Void Function(
  ffi.Pointer<_glist> c,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> result,
  ffi.Int32 resultsize,
);

typedef _dart_canvas_makefilename = void Function(
  ffi.Pointer<_glist> c,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> result,
  int resultsize,
);

typedef _c_canvas_getdir = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<_glist> x,
);

typedef _dart_canvas_getdir = ffi.Pointer<t_symbol> Function(
  ffi.Pointer<_glist> x,
);

typedef _c_sys_hostfontsize = ffi.Int32 Function(
  ffi.Int32 fontsize,
  ffi.Int32 zoom,
);

typedef _dart_sys_hostfontsize = int Function(
  int fontsize,
  int zoom,
);

typedef _c_sys_zoomfontwidth = ffi.Int32 Function(
  ffi.Int32 fontsize,
  ffi.Int32 zoom,
  ffi.Int32 worstcase,
);

typedef _dart_sys_zoomfontwidth = int Function(
  int fontsize,
  int zoom,
  int worstcase,
);

typedef _c_sys_zoomfontheight = ffi.Int32 Function(
  ffi.Int32 fontsize,
  ffi.Int32 zoom,
  ffi.Int32 worstcase,
);

typedef _dart_sys_zoomfontheight = int Function(
  int fontsize,
  int zoom,
  int worstcase,
);

typedef _c_sys_fontwidth = ffi.Int32 Function(
  ffi.Int32 fontsize,
);

typedef _dart_sys_fontwidth = int Function(
  int fontsize,
);

typedef _c_sys_fontheight = ffi.Int32 Function(
  ffi.Int32 fontsize,
);

typedef _dart_sys_fontheight = int Function(
  int fontsize,
);

typedef _c_canvas_dataproperties = ffi.Void Function(
  ffi.Pointer<_glist> x,
  ffi.Pointer<t_scalar> sc,
  ffi.Pointer<_binbuf> b,
);

typedef _dart_canvas_dataproperties = void Function(
  ffi.Pointer<_glist> x,
  ffi.Pointer<t_scalar> sc,
  ffi.Pointer<_binbuf> b,
);

typedef _c_canvas_open = ffi.Int32 Function(
  ffi.Pointer<_glist> x,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> ext,
  ffi.Pointer<ffi.Int8> dirresult,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> nameresult,
  ffi.Uint32 size,
  ffi.Int32 bin,
);

typedef _dart_canvas_open = int Function(
  ffi.Pointer<_glist> x,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> ext,
  ffi.Pointer<ffi.Int8> dirresult,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> nameresult,
  int size,
  int bin,
);

typedef _c_pd_getparentwidget = ffi.Pointer<_parentwidgetbehavior> Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef _dart_pd_getparentwidget = ffi.Pointer<_parentwidgetbehavior> Function(
  ffi.Pointer<ffi.Pointer<_class>> x,
);

typedef t_newmethod = ffi.Pointer<ffi.Void> Function();

typedef _c_class_new = ffi.Pointer<_class> Function(
  ffi.Pointer<t_symbol> name,
  ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
  ffi.Pointer<ffi.NativeFunction<t_method>> freemethod,
  ffi.Int32 size,
  ffi.Int32 flags,
  ffi.Int32 arg1,
);

typedef _dart_class_new = ffi.Pointer<_class> Function(
  ffi.Pointer<t_symbol> name,
  ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
  ffi.Pointer<ffi.NativeFunction<t_method>> freemethod,
  int size,
  int flags,
  int arg1,
);

typedef _c_class_new64 = ffi.Pointer<_class> Function(
  ffi.Pointer<t_symbol> name,
  ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
  ffi.Pointer<ffi.NativeFunction<t_method>> freemethod,
  ffi.Int32 size,
  ffi.Int32 flags,
  ffi.Int32 arg1,
);

typedef _dart_class_new64 = ffi.Pointer<_class> Function(
  ffi.Pointer<t_symbol> name,
  ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
  ffi.Pointer<ffi.NativeFunction<t_method>> freemethod,
  int size,
  int flags,
  int arg1,
);

typedef _c_class_free = ffi.Void Function(
  ffi.Pointer<_class> c,
);

typedef _dart_class_free = void Function(
  ffi.Pointer<_class> c,
);

typedef _c_class_addcreator = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
  ffi.Pointer<t_symbol> s,
  ffi.Int32 type1,
);

typedef _dart_class_addcreator = void Function(
  ffi.Pointer<ffi.NativeFunction<t_newmethod>> newmethod,
  ffi.Pointer<t_symbol> s,
  int type1,
);

typedef _c_class_addmethod = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ffi.Pointer<t_symbol> sel,
  ffi.Int32 arg1,
);

typedef _dart_class_addmethod = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ffi.Pointer<t_symbol> sel,
  int arg1,
);

typedef _c_class_addbang = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _dart_class_addbang = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _c_class_addpointer = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _dart_class_addpointer = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _c_class_doaddfloat = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _dart_class_doaddfloat = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _c_class_addsymbol = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _dart_class_addsymbol = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _c_class_addlist = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _dart_class_addlist = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _c_class_addanything = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _dart_class_addanything = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
);

typedef _c_class_sethelpsymbol = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<t_symbol> s,
);

typedef _dart_class_sethelpsymbol = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<t_symbol> s,
);

typedef _c_class_setwidget = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<_widgetbehavior> w,
);

typedef _dart_class_setwidget = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<_widgetbehavior> w,
);

typedef _c_class_setparentwidget = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<_parentwidgetbehavior> w,
);

typedef _dart_class_setparentwidget = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<_parentwidgetbehavior> w,
);

typedef _c_class_getname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_class> c,
);

typedef _dart_class_getname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_class> c,
);

typedef _c_class_gethelpname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_class> c,
);

typedef _dart_class_gethelpname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_class> c,
);

typedef _c_class_gethelpdir = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_class> c,
);

typedef _dart_class_gethelpdir = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_class> c,
);

typedef _c_class_setdrawcommand = ffi.Void Function(
  ffi.Pointer<_class> c,
);

typedef _dart_class_setdrawcommand = void Function(
  ffi.Pointer<_class> c,
);

typedef _c_class_isdrawcommand = ffi.Int32 Function(
  ffi.Pointer<_class> c,
);

typedef _dart_class_isdrawcommand = int Function(
  ffi.Pointer<_class> c,
);

typedef _c_class_domainsignalin = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Int32 onset,
);

typedef _dart_class_domainsignalin = void Function(
  ffi.Pointer<_class> c,
  int onset,
);

typedef _c_class_set_extern_dir = ffi.Void Function(
  ffi.Pointer<t_symbol> s,
);

typedef _dart_class_set_extern_dir = void Function(
  ffi.Pointer<t_symbol> s,
);

typedef t_savefn = ffi.Void Function(
  ffi.Pointer<t_gobj>,
  ffi.Pointer<_binbuf>,
);

typedef _c_class_setsavefn = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_savefn>> f,
);

typedef _dart_class_setsavefn = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_savefn>> f,
);

typedef _c_class_getsavefn = ffi.Pointer<ffi.NativeFunction<t_savefn>> Function(
  ffi.Pointer<_class> c,
);

typedef _dart_class_getsavefn = ffi.Pointer<ffi.NativeFunction<t_savefn>>
    Function(
  ffi.Pointer<_class> c,
);

typedef _c_obj_saveformat = ffi.Void Function(
  ffi.Pointer<t_text> x,
  ffi.Pointer<_binbuf> bb,
);

typedef _dart_obj_saveformat = void Function(
  ffi.Pointer<t_text> x,
  ffi.Pointer<_binbuf> bb,
);

typedef t_propertiesfn = ffi.Void Function(
  ffi.Pointer<t_gobj>,
  ffi.Pointer<_glist>,
);

typedef _c_class_setpropertiesfn = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_propertiesfn>> f,
);

typedef _dart_class_setpropertiesfn = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_propertiesfn>> f,
);

typedef _c_class_getpropertiesfn
    = ffi.Pointer<ffi.NativeFunction<t_propertiesfn>> Function(
  ffi.Pointer<_class> c,
);

typedef _dart_class_getpropertiesfn
    = ffi.Pointer<ffi.NativeFunction<t_propertiesfn>> Function(
  ffi.Pointer<_class> c,
);

typedef t_classfreefn = ffi.Void Function(
  ffi.Pointer<_class>,
);

typedef _c_class_setfreefn = ffi.Void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_classfreefn>> fn,
);

typedef _dart_class_setfreefn = void Function(
  ffi.Pointer<_class> c,
  ffi.Pointer<ffi.NativeFunction<t_classfreefn>> fn,
);

typedef _c_post = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_post = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_startpost = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_startpost = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_poststring = ffi.Void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_poststring = void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_postfloat = ffi.Void Function(
  ffi.Float f,
);

typedef _dart_postfloat = void Function(
  double f,
);

typedef _c_postatom = ffi.Void Function(
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_postatom = void Function(
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_endpost = ffi.Void Function();

typedef _dart_endpost = void Function();

typedef _c_error = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_error = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_verbose = ffi.Void Function(
  ffi.Int32 level,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_verbose = void Function(
  int level,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_bug = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_bug = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_pd_error = ffi.Void Function(
  ffi.Pointer<ffi.Void> object,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_pd_error = void Function(
  ffi.Pointer<ffi.Void> object,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_logpost = ffi.Void Function(
  ffi.Pointer<ffi.Void> object,
  ffi.Int32 level,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_logpost = void Function(
  ffi.Pointer<ffi.Void> object,
  int level,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_sys_isabsolutepath = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> dir,
);

typedef _dart_sys_isabsolutepath = int Function(
  ffi.Pointer<ffi.Int8> dir,
);

typedef _c_sys_bashfilename = ffi.Void Function(
  ffi.Pointer<ffi.Int8> from,
  ffi.Pointer<ffi.Int8> to,
);

typedef _dart_sys_bashfilename = void Function(
  ffi.Pointer<ffi.Int8> from,
  ffi.Pointer<ffi.Int8> to,
);

typedef _c_sys_unbashfilename = ffi.Void Function(
  ffi.Pointer<ffi.Int8> from,
  ffi.Pointer<ffi.Int8> to,
);

typedef _dart_sys_unbashfilename = void Function(
  ffi.Pointer<ffi.Int8> from,
  ffi.Pointer<ffi.Int8> to,
);

typedef _c_open_via_path = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> dir,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> ext,
  ffi.Pointer<ffi.Int8> dirresult,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> nameresult,
  ffi.Uint32 size,
  ffi.Int32 bin,
);

typedef _dart_open_via_path = int Function(
  ffi.Pointer<ffi.Int8> dir,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> ext,
  ffi.Pointer<ffi.Int8> dirresult,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> nameresult,
  int size,
  int bin,
);

typedef _c_sched_geteventno = ffi.Int32 Function();

typedef _dart_sched_geteventno = int Function();

typedef _c_sys_getrealtime = ffi.Double Function();

typedef _dart_sys_getrealtime = double Function();

typedef _typedefC_1 = ffi.Int32 Function();

typedef _c_sys_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 oflag,
);

typedef _dart_sys_open = int Function(
  ffi.Pointer<ffi.Int8> path,
  int oflag,
);

typedef _c_sys_close = ffi.Int32 Function(
  ffi.Int32 fd,
);

typedef _dart_sys_close = int Function(
  int fd,
);

typedef _c_sys_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_sys_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _c_sys_fclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> stream,
);

typedef _dart_sys_fclose = int Function(
  ffi.Pointer<_IO_FILE> stream,
);

typedef _c_sys_lock = ffi.Void Function();

typedef _dart_sys_lock = void Function();

typedef _c_sys_unlock = ffi.Void Function();

typedef _dart_sys_unlock = void Function();

typedef _c_sys_trylock = ffi.Int32 Function();

typedef _dart_sys_trylock = int Function();

typedef _c_plus_perform = ffi.Pointer<ffi.Int64> Function(
  ffi.Pointer<ffi.Int64> args,
);

typedef _dart_plus_perform = ffi.Pointer<ffi.Int64> Function(
  ffi.Pointer<ffi.Int64> args,
);

typedef _c_zero_perform = ffi.Pointer<ffi.Int64> Function(
  ffi.Pointer<ffi.Int64> args,
);

typedef _dart_zero_perform = ffi.Pointer<ffi.Int64> Function(
  ffi.Pointer<ffi.Int64> args,
);

typedef _c_copy_perform = ffi.Pointer<ffi.Int64> Function(
  ffi.Pointer<ffi.Int64> args,
);

typedef _dart_copy_perform = ffi.Pointer<ffi.Int64> Function(
  ffi.Pointer<ffi.Int64> args,
);

typedef _c_dsp_add_plus = ffi.Void Function(
  ffi.Pointer<ffi.Float> in1,
  ffi.Pointer<ffi.Float> in2,
  ffi.Pointer<ffi.Float> out,
  ffi.Int32 n,
);

typedef _dart_dsp_add_plus = void Function(
  ffi.Pointer<ffi.Float> in1,
  ffi.Pointer<ffi.Float> in2,
  ffi.Pointer<ffi.Float> out,
  int n,
);

typedef _c_dsp_add_copy = ffi.Void Function(
  ffi.Pointer<ffi.Float> in_1,
  ffi.Pointer<ffi.Float> out,
  ffi.Int32 n,
);

typedef _dart_dsp_add_copy = void Function(
  ffi.Pointer<ffi.Float> in_1,
  ffi.Pointer<ffi.Float> out,
  int n,
);

typedef _c_dsp_add_scalarcopy = ffi.Void Function(
  ffi.Pointer<ffi.Float> in_1,
  ffi.Pointer<ffi.Float> out,
  ffi.Int32 n,
);

typedef _dart_dsp_add_scalarcopy = void Function(
  ffi.Pointer<ffi.Float> in_1,
  ffi.Pointer<ffi.Float> out,
  int n,
);

typedef _c_dsp_add_zero = ffi.Void Function(
  ffi.Pointer<ffi.Float> out,
  ffi.Int32 n,
);

typedef _dart_dsp_add_zero = void Function(
  ffi.Pointer<ffi.Float> out,
  int n,
);

typedef _c_sys_getblksize = ffi.Int32 Function();

typedef _dart_sys_getblksize = int Function();

typedef _c_sys_getsr = ffi.Float Function();

typedef _dart_sys_getsr = double Function();

typedef _c_sys_get_inchannels = ffi.Int32 Function();

typedef _dart_sys_get_inchannels = int Function();

typedef _c_sys_get_outchannels = ffi.Int32 Function();

typedef _dart_sys_get_outchannels = int Function();

typedef t_perfroutine = ffi.Pointer<ffi.Int64> Function(
  ffi.Pointer<ffi.Int64>,
);

typedef _c_dsp_add = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_perfroutine>> f,
  ffi.Int32 n,
);

typedef _dart_dsp_add = void Function(
  ffi.Pointer<ffi.NativeFunction<t_perfroutine>> f,
  int n,
);

typedef _c_dsp_addv = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_perfroutine>> f,
  ffi.Int32 n,
  ffi.Pointer<ffi.Int64> vec,
);

typedef _dart_dsp_addv = void Function(
  ffi.Pointer<ffi.NativeFunction<t_perfroutine>> f,
  int n,
  ffi.Pointer<ffi.Int64> vec,
);

typedef _c_pd_fft = ffi.Void Function(
  ffi.Pointer<ffi.Float> buf,
  ffi.Int32 npoints,
  ffi.Int32 inverse,
);

typedef _dart_pd_fft = void Function(
  ffi.Pointer<ffi.Float> buf,
  int npoints,
  int inverse,
);

typedef _c_ilog2 = ffi.Int32 Function(
  ffi.Int32 n,
);

typedef _dart_ilog2 = int Function(
  int n,
);

typedef _c_mayer_fht = ffi.Void Function(
  ffi.Pointer<ffi.Float> fz,
  ffi.Int32 n,
);

typedef _dart_mayer_fht = void Function(
  ffi.Pointer<ffi.Float> fz,
  int n,
);

typedef _c_mayer_fft = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Float> real,
  ffi.Pointer<ffi.Float> imag,
);

typedef _dart_mayer_fft = void Function(
  int n,
  ffi.Pointer<ffi.Float> real,
  ffi.Pointer<ffi.Float> imag,
);

typedef _c_mayer_ifft = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Float> real,
  ffi.Pointer<ffi.Float> imag,
);

typedef _dart_mayer_ifft = void Function(
  int n,
  ffi.Pointer<ffi.Float> real,
  ffi.Pointer<ffi.Float> imag,
);

typedef _c_mayer_realfft = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Float> real,
);

typedef _dart_mayer_realfft = void Function(
  int n,
  ffi.Pointer<ffi.Float> real,
);

typedef _c_mayer_realifft = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Float> real,
);

typedef _dart_mayer_realifft = void Function(
  int n,
  ffi.Pointer<ffi.Float> real,
);

typedef _c_canvas_suspend_dsp = ffi.Int32 Function();

typedef _dart_canvas_suspend_dsp = int Function();

typedef _c_canvas_resume_dsp = ffi.Void Function(
  ffi.Int32 oldstate,
);

typedef _dart_canvas_resume_dsp = void Function(
  int oldstate,
);

typedef _c_canvas_update_dsp = ffi.Void Function();

typedef _dart_canvas_update_dsp = void Function();

typedef _c_resample_init = ffi.Void Function(
  ffi.Pointer<t_resample> x,
);

typedef _dart_resample_init = void Function(
  ffi.Pointer<t_resample> x,
);

typedef _c_resample_free = ffi.Void Function(
  ffi.Pointer<t_resample> x,
);

typedef _dart_resample_free = void Function(
  ffi.Pointer<t_resample> x,
);

typedef _c_resample_dsp = ffi.Void Function(
  ffi.Pointer<t_resample> x,
  ffi.Pointer<ffi.Float> in_1,
  ffi.Int32 insize,
  ffi.Pointer<ffi.Float> out,
  ffi.Int32 outsize,
  ffi.Int32 method,
);

typedef _dart_resample_dsp = void Function(
  ffi.Pointer<t_resample> x,
  ffi.Pointer<ffi.Float> in_1,
  int insize,
  ffi.Pointer<ffi.Float> out,
  int outsize,
  int method,
);

typedef _c_resamplefrom_dsp = ffi.Void Function(
  ffi.Pointer<t_resample> x,
  ffi.Pointer<ffi.Float> in_1,
  ffi.Int32 insize,
  ffi.Int32 outsize,
  ffi.Int32 method,
);

typedef _dart_resamplefrom_dsp = void Function(
  ffi.Pointer<t_resample> x,
  ffi.Pointer<ffi.Float> in_1,
  int insize,
  int outsize,
  int method,
);

typedef _c_resampleto_dsp = ffi.Void Function(
  ffi.Pointer<t_resample> x,
  ffi.Pointer<ffi.Float> out,
  ffi.Int32 insize,
  ffi.Int32 outsize,
  ffi.Int32 method,
);

typedef _dart_resampleto_dsp = void Function(
  ffi.Pointer<t_resample> x,
  ffi.Pointer<ffi.Float> out,
  int insize,
  int outsize,
  int method,
);

typedef _c_mtof = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_mtof = double Function(
  double arg0,
);

typedef _c_ftom = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_ftom = double Function(
  double arg0,
);

typedef _c_rmstodb = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_rmstodb = double Function(
  double arg0,
);

typedef _c_powtodb = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_powtodb = double Function(
  double arg0,
);

typedef _c_dbtorms = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_dbtorms = double Function(
  double arg0,
);

typedef _c_dbtopow = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_dbtopow = double Function(
  double arg0,
);

typedef _c_q8_sqrt = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_q8_sqrt = double Function(
  double arg0,
);

typedef _c_q8_rsqrt = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_q8_rsqrt = double Function(
  double arg0,
);

typedef _c_qsqrt = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_qsqrt = double Function(
  double arg0,
);

typedef _c_qrsqrt = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_qrsqrt = double Function(
  double arg0,
);

typedef _c_garray_getfloatarray = ffi.Int32 Function(
  ffi.Pointer<_garray> x,
  ffi.Pointer<ffi.Int32> size,
  ffi.Pointer<ffi.Pointer<ffi.Float>> vec,
);

typedef _dart_garray_getfloatarray = int Function(
  ffi.Pointer<_garray> x,
  ffi.Pointer<ffi.Int32> size,
  ffi.Pointer<ffi.Pointer<ffi.Float>> vec,
);

typedef _c_garray_redraw = ffi.Void Function(
  ffi.Pointer<_garray> x,
);

typedef _dart_garray_redraw = void Function(
  ffi.Pointer<_garray> x,
);

typedef _c_garray_npoints = ffi.Int32 Function(
  ffi.Pointer<_garray> x,
);

typedef _dart_garray_npoints = int Function(
  ffi.Pointer<_garray> x,
);

typedef _c_garray_vec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_garray> x,
);

typedef _dart_garray_vec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_garray> x,
);

typedef _c_garray_resize = ffi.Void Function(
  ffi.Pointer<_garray> x,
  ffi.Float f,
);

typedef _dart_garray_resize = void Function(
  ffi.Pointer<_garray> x,
  double f,
);

typedef _c_garray_resize_long = ffi.Void Function(
  ffi.Pointer<_garray> x,
  ffi.Int64 n,
);

typedef _dart_garray_resize_long = void Function(
  ffi.Pointer<_garray> x,
  int n,
);

typedef _c_garray_usedindsp = ffi.Void Function(
  ffi.Pointer<_garray> x,
);

typedef _dart_garray_usedindsp = void Function(
  ffi.Pointer<_garray> x,
);

typedef _c_garray_setsaveit = ffi.Void Function(
  ffi.Pointer<_garray> x,
  ffi.Int32 saveit,
);

typedef _dart_garray_setsaveit = void Function(
  ffi.Pointer<_garray> x,
  int saveit,
);

typedef _c_garray_getglist = ffi.Pointer<_glist> Function(
  ffi.Pointer<_garray> x,
);

typedef _dart_garray_getglist = ffi.Pointer<_glist> Function(
  ffi.Pointer<_garray> x,
);

typedef _c_garray_getarray = ffi.Pointer<_array> Function(
  ffi.Pointer<_garray> x,
);

typedef _dart_garray_getarray = ffi.Pointer<_array> Function(
  ffi.Pointer<_garray> x,
);

typedef _c_value_get = ffi.Pointer<ffi.Float> Function(
  ffi.Pointer<t_symbol> s,
);

typedef _dart_value_get = ffi.Pointer<ffi.Float> Function(
  ffi.Pointer<t_symbol> s,
);

typedef _c_value_release = ffi.Void Function(
  ffi.Pointer<t_symbol> s,
);

typedef _dart_value_release = void Function(
  ffi.Pointer<t_symbol> s,
);

typedef _c_value_getfloat = ffi.Int32 Function(
  ffi.Pointer<t_symbol> s,
  ffi.Pointer<ffi.Float> f,
);

typedef _dart_value_getfloat = int Function(
  ffi.Pointer<t_symbol> s,
  ffi.Pointer<ffi.Float> f,
);

typedef _c_value_setfloat = ffi.Int32 Function(
  ffi.Pointer<t_symbol> s,
  ffi.Float f,
);

typedef _dart_value_setfloat = int Function(
  ffi.Pointer<t_symbol> s,
  double f,
);

typedef _c_sys_vgui = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_sys_vgui = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_sys_gui = ffi.Void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_sys_gui = void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_sys_pretendguibytes = ffi.Void Function(
  ffi.Int32 n,
);

typedef _dart_sys_pretendguibytes = void Function(
  int n,
);

typedef t_guicallbackfn = ffi.Void Function(
  ffi.Pointer<t_gobj>,
  ffi.Pointer<_glist>,
);

typedef _c_sys_queuegui = ffi.Void Function(
  ffi.Pointer<ffi.Void> client,
  ffi.Pointer<_glist> glist,
  ffi.Pointer<ffi.NativeFunction<t_guicallbackfn>> f,
);

typedef _dart_sys_queuegui = void Function(
  ffi.Pointer<ffi.Void> client,
  ffi.Pointer<_glist> glist,
  ffi.Pointer<ffi.NativeFunction<t_guicallbackfn>> f,
);

typedef _c_sys_unqueuegui = ffi.Void Function(
  ffi.Pointer<ffi.Void> client,
);

typedef _dart_sys_unqueuegui = void Function(
  ffi.Pointer<ffi.Void> client,
);

typedef _c_gfxstub_new = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> owner,
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Int8> cmd,
);

typedef _dart_gfxstub_new = void Function(
  ffi.Pointer<ffi.Pointer<_class>> owner,
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Int8> cmd,
);

typedef _c_gfxstub_deleteforkey = ffi.Void Function(
  ffi.Pointer<ffi.Void> key,
);

typedef _dart_gfxstub_deleteforkey = void Function(
  ffi.Pointer<ffi.Void> key,
);

typedef _c_c_extern = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_class>> cls,
  ffi.Pointer<ffi.NativeFunction<t_newmethod>> newroutine,
  ffi.Pointer<ffi.NativeFunction<t_method>> freeroutine,
  ffi.Pointer<t_symbol> name,
  ffi.Int32 size,
  ffi.Int32 tiny,
  ffi.Int32 arg1,
);

typedef _dart_c_extern = void Function(
  ffi.Pointer<ffi.Pointer<_class>> cls,
  ffi.Pointer<ffi.NativeFunction<t_newmethod>> newroutine,
  ffi.Pointer<ffi.NativeFunction<t_method>> freeroutine,
  ffi.Pointer<t_symbol> name,
  int size,
  int tiny,
  int arg1,
);

typedef _c_c_addmess = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ffi.Pointer<t_symbol> sel,
  ffi.Int32 arg1,
);

typedef _dart_c_addmess = void Function(
  ffi.Pointer<ffi.NativeFunction<t_method>> fn,
  ffi.Pointer<t_symbol> sel,
  int arg1,
);

typedef _c_sys_getversion = ffi.Void Function(
  ffi.Pointer<ffi.Int32> major,
  ffi.Pointer<ffi.Int32> minor,
  ffi.Pointer<ffi.Int32> bugfix,
);

typedef _dart_sys_getversion = void Function(
  ffi.Pointer<ffi.Int32> major,
  ffi.Pointer<ffi.Int32> minor,
  ffi.Pointer<ffi.Int32> bugfix,
);

typedef _c_pd_getcanvaslist = ffi.Pointer<_glist> Function();

typedef _dart_pd_getcanvaslist = ffi.Pointer<_glist> Function();

typedef _c_pd_getdspstate = ffi.Int32 Function();

typedef _dart_pd_getdspstate = int Function();

typedef _c_text_getbufbyname = ffi.Pointer<_binbuf> Function(
  ffi.Pointer<t_symbol> s,
);

typedef _dart_text_getbufbyname = ffi.Pointer<_binbuf> Function(
  ffi.Pointer<t_symbol> s,
);

typedef _c_text_notifybyname = ffi.Void Function(
  ffi.Pointer<t_symbol> s,
);

typedef _dart_text_notifybyname = void Function(
  ffi.Pointer<t_symbol> s,
);

typedef _c_libpd_init = ffi.Int32 Function();

typedef _dart_libpd_init = int Function();

typedef _c_libpd_clear_search_path = ffi.Void Function();

typedef _dart_libpd_clear_search_path = void Function();

typedef _c_libpd_add_to_search_path = ffi.Void Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_libpd_add_to_search_path = void Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_libpd_openfile = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> dir,
);

typedef _dart_libpd_openfile = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> dir,
);

typedef _c_libpd_closefile = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_libpd_closefile = void Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_libpd_getdollarzero = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_libpd_getdollarzero = int Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_libpd_blocksize = ffi.Int32 Function();

typedef _dart_libpd_blocksize = int Function();

typedef _c_libpd_init_audio = ffi.Int32 Function(
  ffi.Int32 inChannels,
  ffi.Int32 outChannels,
  ffi.Int32 sampleRate,
);

typedef _dart_libpd_init_audio = int Function(
  int inChannels,
  int outChannels,
  int sampleRate,
);

typedef _c_libpd_process_float = ffi.Int32 Function(
  ffi.Int32 ticks,
  ffi.Pointer<ffi.Float> inBuffer,
  ffi.Pointer<ffi.Float> outBuffer,
);

typedef _dart_libpd_process_float = int Function(
  int ticks,
  ffi.Pointer<ffi.Float> inBuffer,
  ffi.Pointer<ffi.Float> outBuffer,
);

typedef _c_libpd_process_short = ffi.Int32 Function(
  ffi.Int32 ticks,
  ffi.Pointer<ffi.Int16> inBuffer,
  ffi.Pointer<ffi.Int16> outBuffer,
);

typedef _dart_libpd_process_short = int Function(
  int ticks,
  ffi.Pointer<ffi.Int16> inBuffer,
  ffi.Pointer<ffi.Int16> outBuffer,
);

typedef _c_libpd_process_double = ffi.Int32 Function(
  ffi.Int32 ticks,
  ffi.Pointer<ffi.Double> inBuffer,
  ffi.Pointer<ffi.Double> outBuffer,
);

typedef _dart_libpd_process_double = int Function(
  int ticks,
  ffi.Pointer<ffi.Double> inBuffer,
  ffi.Pointer<ffi.Double> outBuffer,
);

typedef _c_libpd_process_raw = ffi.Int32 Function(
  ffi.Pointer<ffi.Float> inBuffer,
  ffi.Pointer<ffi.Float> outBuffer,
);

typedef _dart_libpd_process_raw = int Function(
  ffi.Pointer<ffi.Float> inBuffer,
  ffi.Pointer<ffi.Float> outBuffer,
);

typedef _c_libpd_process_raw_short = ffi.Int32 Function(
  ffi.Pointer<ffi.Int16> inBuffer,
  ffi.Pointer<ffi.Int16> outBuffer,
);

typedef _dart_libpd_process_raw_short = int Function(
  ffi.Pointer<ffi.Int16> inBuffer,
  ffi.Pointer<ffi.Int16> outBuffer,
);

typedef _c_libpd_process_raw_double = ffi.Int32 Function(
  ffi.Pointer<ffi.Double> inBuffer,
  ffi.Pointer<ffi.Double> outBuffer,
);

typedef _dart_libpd_process_raw_double = int Function(
  ffi.Pointer<ffi.Double> inBuffer,
  ffi.Pointer<ffi.Double> outBuffer,
);

typedef _c_libpd_arraysize = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_libpd_arraysize = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_libpd_resize_array = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int64 size,
);

typedef _dart_libpd_resize_array = int Function(
  ffi.Pointer<ffi.Int8> name,
  int size,
);

typedef _c_libpd_read_array = ffi.Int32 Function(
  ffi.Pointer<ffi.Float> dest,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 offset,
  ffi.Int32 n,
);

typedef _dart_libpd_read_array = int Function(
  ffi.Pointer<ffi.Float> dest,
  ffi.Pointer<ffi.Int8> name,
  int offset,
  int n,
);

typedef _c_libpd_write_array = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 offset,
  ffi.Pointer<ffi.Float> src,
  ffi.Int32 n,
);

typedef _dart_libpd_write_array = int Function(
  ffi.Pointer<ffi.Int8> name,
  int offset,
  ffi.Pointer<ffi.Float> src,
  int n,
);

typedef _c_libpd_bang = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> recv,
);

typedef _dart_libpd_bang = int Function(
  ffi.Pointer<ffi.Int8> recv,
);

typedef _c_libpd_float = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> recv,
  ffi.Float x,
);

typedef _dart_libpd_float = int Function(
  ffi.Pointer<ffi.Int8> recv,
  double x,
);

typedef _c_libpd_symbol = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> recv,
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _dart_libpd_symbol = int Function(
  ffi.Pointer<ffi.Int8> recv,
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _c_libpd_start_message = ffi.Int32 Function(
  ffi.Int32 maxlen,
);

typedef _dart_libpd_start_message = int Function(
  int maxlen,
);

typedef _c_libpd_add_float = ffi.Void Function(
  ffi.Float x,
);

typedef _dart_libpd_add_float = void Function(
  double x,
);

typedef _c_libpd_add_symbol = ffi.Void Function(
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _dart_libpd_add_symbol = void Function(
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _c_libpd_finish_list = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> recv,
);

typedef _dart_libpd_finish_list = int Function(
  ffi.Pointer<ffi.Int8> recv,
);

typedef _c_libpd_finish_message = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> recv,
  ffi.Pointer<ffi.Int8> msg,
);

typedef _dart_libpd_finish_message = int Function(
  ffi.Pointer<ffi.Int8> recv,
  ffi.Pointer<ffi.Int8> msg,
);

typedef _c_libpd_set_float = ffi.Void Function(
  ffi.Pointer<t_atom> a,
  ffi.Float x,
);

typedef _dart_libpd_set_float = void Function(
  ffi.Pointer<t_atom> a,
  double x,
);

typedef _c_libpd_set_symbol = ffi.Void Function(
  ffi.Pointer<t_atom> a,
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _dart_libpd_set_symbol = void Function(
  ffi.Pointer<t_atom> a,
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _c_libpd_list = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> recv,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_libpd_list = int Function(
  ffi.Pointer<ffi.Int8> recv,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_libpd_message = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> recv,
  ffi.Pointer<ffi.Int8> msg,
  ffi.Int32 argc,
  ffi.Pointer<t_atom> argv,
);

typedef _dart_libpd_message = int Function(
  ffi.Pointer<ffi.Int8> recv,
  ffi.Pointer<ffi.Int8> msg,
  int argc,
  ffi.Pointer<t_atom> argv,
);

typedef _c_libpd_bind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> recv,
);

typedef _dart_libpd_bind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> recv,
);

typedef _c_libpd_unbind = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_libpd_unbind = void Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_libpd_exists = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> recv,
);

typedef _dart_libpd_exists = int Function(
  ffi.Pointer<ffi.Int8> recv,
);

typedef t_libpd_printhook = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_libpd_set_printhook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_printhook>> hook,
);

typedef _dart_libpd_set_printhook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_printhook>> hook,
);

typedef t_libpd_banghook = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_libpd_set_banghook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_banghook>> hook,
);

typedef _dart_libpd_set_banghook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_banghook>> hook,
);

typedef t_libpd_floathook = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Float,
);

typedef _c_libpd_set_floathook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_floathook>> hook,
);

typedef _dart_libpd_set_floathook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_floathook>> hook,
);

typedef t_libpd_symbolhook = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_libpd_set_symbolhook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_symbolhook>> hook,
);

typedef _dart_libpd_set_symbolhook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_symbolhook>> hook,
);

typedef t_libpd_listhook = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<t_atom>,
);

typedef _c_libpd_set_listhook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_listhook>> hook,
);

typedef _dart_libpd_set_listhook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_listhook>> hook,
);

typedef t_libpd_messagehook = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<t_atom>,
);

typedef _c_libpd_set_messagehook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_messagehook>> hook,
);

typedef _dart_libpd_set_messagehook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_messagehook>> hook,
);

typedef _c_libpd_is_float = ffi.Int32 Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_libpd_is_float = int Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_libpd_is_symbol = ffi.Int32 Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_libpd_is_symbol = int Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_libpd_get_float = ffi.Float Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_libpd_get_float = double Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_libpd_get_symbol = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_libpd_get_symbol = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_libpd_next_atom = ffi.Pointer<t_atom> Function(
  ffi.Pointer<t_atom> a,
);

typedef _dart_libpd_next_atom = ffi.Pointer<t_atom> Function(
  ffi.Pointer<t_atom> a,
);

typedef _c_libpd_noteon = ffi.Int32 Function(
  ffi.Int32 channel,
  ffi.Int32 pitch,
  ffi.Int32 velocity,
);

typedef _dart_libpd_noteon = int Function(
  int channel,
  int pitch,
  int velocity,
);

typedef _c_libpd_controlchange = ffi.Int32 Function(
  ffi.Int32 channel,
  ffi.Int32 controller,
  ffi.Int32 value,
);

typedef _dart_libpd_controlchange = int Function(
  int channel,
  int controller,
  int value,
);

typedef _c_libpd_programchange = ffi.Int32 Function(
  ffi.Int32 channel,
  ffi.Int32 value,
);

typedef _dart_libpd_programchange = int Function(
  int channel,
  int value,
);

typedef _c_libpd_pitchbend = ffi.Int32 Function(
  ffi.Int32 channel,
  ffi.Int32 value,
);

typedef _dart_libpd_pitchbend = int Function(
  int channel,
  int value,
);

typedef _c_libpd_aftertouch = ffi.Int32 Function(
  ffi.Int32 channel,
  ffi.Int32 value,
);

typedef _dart_libpd_aftertouch = int Function(
  int channel,
  int value,
);

typedef _c_libpd_polyaftertouch = ffi.Int32 Function(
  ffi.Int32 channel,
  ffi.Int32 pitch,
  ffi.Int32 value,
);

typedef _dart_libpd_polyaftertouch = int Function(
  int channel,
  int pitch,
  int value,
);

typedef _c_libpd_midibyte = ffi.Int32 Function(
  ffi.Int32 port,
  ffi.Int32 byte,
);

typedef _dart_libpd_midibyte = int Function(
  int port,
  int byte,
);

typedef _c_libpd_sysex = ffi.Int32 Function(
  ffi.Int32 port,
  ffi.Int32 byte,
);

typedef _dart_libpd_sysex = int Function(
  int port,
  int byte,
);

typedef _c_libpd_sysrealtime = ffi.Int32 Function(
  ffi.Int32 port,
  ffi.Int32 byte,
);

typedef _dart_libpd_sysrealtime = int Function(
  int port,
  int byte,
);

typedef t_libpd_noteonhook = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
);

typedef _c_libpd_set_noteonhook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_noteonhook>> hook,
);

typedef _dart_libpd_set_noteonhook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_noteonhook>> hook,
);

typedef t_libpd_controlchangehook = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
);

typedef _c_libpd_set_controlchangehook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_controlchangehook>> hook,
);

typedef _dart_libpd_set_controlchangehook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_controlchangehook>> hook,
);

typedef t_libpd_programchangehook = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
);

typedef _c_libpd_set_programchangehook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_programchangehook>> hook,
);

typedef _dart_libpd_set_programchangehook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_programchangehook>> hook,
);

typedef t_libpd_pitchbendhook = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
);

typedef _c_libpd_set_pitchbendhook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_pitchbendhook>> hook,
);

typedef _dart_libpd_set_pitchbendhook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_pitchbendhook>> hook,
);

typedef t_libpd_aftertouchhook = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
);

typedef _c_libpd_set_aftertouchhook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_aftertouchhook>> hook,
);

typedef _dart_libpd_set_aftertouchhook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_aftertouchhook>> hook,
);

typedef t_libpd_polyaftertouchhook = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
);

typedef _c_libpd_set_polyaftertouchhook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_polyaftertouchhook>> hook,
);

typedef _dart_libpd_set_polyaftertouchhook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_polyaftertouchhook>> hook,
);

typedef t_libpd_midibytehook = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
);

typedef _c_libpd_set_midibytehook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_midibytehook>> hook,
);

typedef _dart_libpd_set_midibytehook = void Function(
  ffi.Pointer<ffi.NativeFunction<t_libpd_midibytehook>> hook,
);

typedef _c_libpd_start_gui = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_libpd_start_gui = int Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_libpd_stop_gui = ffi.Void Function();

typedef _dart_libpd_stop_gui = void Function();

typedef _c_libpd_poll_gui = ffi.Int32 Function();

typedef _dart_libpd_poll_gui = int Function();

typedef _c_libpd_new_instance = ffi.Pointer<_pdinstance> Function();

typedef _dart_libpd_new_instance = ffi.Pointer<_pdinstance> Function();

typedef _c_libpd_set_instance = ffi.Void Function(
  ffi.Pointer<_pdinstance> p,
);

typedef _dart_libpd_set_instance = void Function(
  ffi.Pointer<_pdinstance> p,
);

typedef _c_libpd_free_instance = ffi.Void Function(
  ffi.Pointer<_pdinstance> p,
);

typedef _dart_libpd_free_instance = void Function(
  ffi.Pointer<_pdinstance> p,
);

typedef _c_libpd_this_instance = ffi.Pointer<_pdinstance> Function();

typedef _dart_libpd_this_instance = ffi.Pointer<_pdinstance> Function();

typedef _c_libpd_get_instance = ffi.Pointer<_pdinstance> Function(
  ffi.Int32 index,
);

typedef _dart_libpd_get_instance = ffi.Pointer<_pdinstance> Function(
  int index,
);

typedef _c_libpd_num_instances = ffi.Int32 Function();

typedef _dart_libpd_num_instances = int Function();

typedef _c_libpd_set_verbose = ffi.Void Function(
  ffi.Int32 verbose,
);

typedef _dart_libpd_set_verbose = void Function(
  int verbose,
);

typedef _c_libpd_get_verbose = ffi.Int32 Function();

typedef _dart_libpd_get_verbose = int Function();
